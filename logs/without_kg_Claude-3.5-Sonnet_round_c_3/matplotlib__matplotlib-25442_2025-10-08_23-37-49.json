{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/matplotlib/offsetbox.py lines 1511-1511)": "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
    "Location 2 (/root/hy/projects_3/matplotlib/lib/matplotlib/offsetbox.py lines 1559-1568)": "\n    def disconnect(self):\n        \"\"\"Disconnect the callbacks.\"\"\"\n        if self.ref_artist.figure is not None:\n            for cid in self.cids:\n                self.canvas.mpl_disconnect(cid)\n            try:\n                c1 = self._c1\n            except AttributeError:\n                pass\n            else:\n                self.canvas.mpl_disconnect(c1)\n",
    "Location 3 (/root/hy/projects_3/matplotlib/lib/matplotlib/offsetbox.py lines 1552-1557)": "\n    def _check_still_parented(self):\n        if self.ref_artist.figure is None:\n            self.disconnect()\n            return False\n        else:\n            return True\n",
    "Location 4 (/root/hy/projects_3/matplotlib/lib/matplotlib/offsetbox.py lines 1502-1508)": "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Safety check before accessing canvas\n        if self.ref_artist.figure is not None:\n            self._use_blit = use_blit and self.canvas.supports_blit\n            self.cids = [\n                self.canvas.callbacks._connect_picklable(\n                    'pick_event', self.on_pick),\n                self.canvas.callbacks._connect_picklable(\n                    'button_release_event', self.on_release),\n            ]\n        else:\n            self._use_blit = False\n            self.cids = []\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/matplotlib/offsetbox.py lines 1511-1511)": [
      "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\n    # A property, not an attribute, to maintain picklability.\n    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\ncanvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n",
      "\n    # A property, not an attribute, to maintain picklability.\n    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n"
    ],
    "Location 2 (/root/hy/projects_3/matplotlib/lib/matplotlib/offsetbox.py lines 1559-1568)": [
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    if self.ref_artist.figure is not None:\n        for cid in self.cids:\n            self.canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            self.canvas.mpl_disconnect(c1)\n",
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    if self.ref_artist.figure is not None:\n        for cid in self.cids:\n            self.canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            self.canvas.mpl_disconnect(c1)\n",
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    if self.ref_artist.figure is not None:\n        for cid in self.cids:\n            self.canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            self.canvas.mpl_disconnect(c1)\n",
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    if self.ref_artist.figure is not None:\n        for cid in self.cids:\n            self.canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            self.canvas.mpl_disconnect(c1)\n",
      "\ndef disconnect(self):\n    \"\"\"Disconnect the callbacks.\"\"\"\n    if self.ref_artist.figure is not None:\n        for cid in self.cids:\n            self.canvas.mpl_disconnect(cid)\n        try:\n            c1 = self._c1\n        except AttributeError:\n            pass\n        else:\n            self.canvas.mpl_disconnect(c1)\n",
      "\n    def disconnect(self):\n        \"\"\"Disconnect the callbacks.\"\"\"\n        if self.ref_artist.figure is not None:\n            for cid in self.cids:\n                self.canvas.mpl_disconnect(cid)\n            try:\n                c1 = self._c1\n            except AttributeError:\n                pass\n            else:\n                self.canvas.mpl_disconnect(c1)\n",
      "\n    def disconnect(self):\n        \"\"\"Disconnect the callbacks.\"\"\"\n        if self.ref_artist.figure is not None:\n            for cid in self.cids:\n                self.canvas.mpl_disconnect(cid)\n            try:\n                c1 = self._c1\n            except AttributeError:\n                pass\n            else:\n                self.canvas.mpl_disconnect(c1)\n",
      "\n    def disconnect(self):\n        \"\"\"Disconnect the callbacks.\"\"\"\n        if self.ref_artist.figure is not None:\n            for cid in self.cids:\n                self.canvas.mpl_disconnect(cid)\n            try:\n                c1 = self._c1\n            except AttributeError:\n                pass\n            else:\n                self.canvas.mpl_disconnect(c1)\n"
    ],
    "Location 3 (/root/hy/projects_3/matplotlib/lib/matplotlib/offsetbox.py lines 1552-1557)": [
      "\n    def _check_still_parented(self):\n        if self.ref_artist.figure is None:\n            self.disconnect()\n            return False\n        else:\n            return True\n",
      "\ndef _check_still_parented(self):\n    if self.ref_artist.figure is None:\n        self.disconnect()\n        return False\n    else:\n        return True\n",
      "\n    def _check_still_parented(self):\n        if self.ref_artist.figure is None:\n            self.disconnect()\n            return False\n        else:\n            return True\n",
      "\n    def _check_still_parented(self):\n        if self.ref_artist.figure is None:\n            self.disconnect()\n            return False\n        else:\n            return True\n",
      "\n    def _check_still_parented(self):\n        if self.ref_artist.figure is None:\n            self.disconnect()\n            return False\n        else:\n            return True\n",
      "\ndef _check_still_parented(self):\n    if self.ref_artist.figure is None:\n        self.disconnect()\n        return False\n    else:\n        return True\n",
      "\ndef _check_still_parented(self):\n    if self.ref_artist.figure is None:\n        self.disconnect()\n        return False\n    else:\n        return True\n",
      "\n    def _check_still_parented(self):\n        if self.ref_artist.figure is None:\n            self.disconnect()\n            return False\n        else:\n            return True\n"
    ],
    "Location 4 (/root/hy/projects_3/matplotlib/lib/matplotlib/offsetbox.py lines 1502-1508)": [
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Safety check before accessing canvas\n        if self.ref_artist.figure is not None:\n            self._use_blit = use_blit and self.canvas.supports_blit\n            self.cids = [\n                self.canvas.callbacks._connect_picklable(\n                    'pick_event', self.on_pick),\n                self.canvas.callbacks._connect_picklable(\n                    'button_release_event', self.on_release),\n            ]\n        else:\n            self._use_blit = False\n            self.cids = []\n",
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Safety check before accessing canvas\n        if self.ref_artist.figure is not None:\n            self._use_blit = use_blit and self.canvas.supports_blit\n            self.cids = [\n                self.canvas.callbacks._connect_picklable(\n                    'pick_event', self.on_pick),\n                self.canvas.callbacks._connect_picklable(\n                    'button_release_event', self.on_release),\n            ]\n        else:\n            self._use_blit = False\n            self.cids = []\n",
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Safety check before accessing canvas\n        if self.ref_artist.figure is not None:\n            self._use_blit = use_blit and self.canvas.supports_blit\n            self.cids = [\n                self.canvas.callbacks._connect_picklable(\n                    'pick_event', self.on_pick),\n                self.canvas.callbacks._connect_picklable(\n                    'button_release_event', self.on_release),\n            ]\n        else:\n            self._use_blit = False\n            self.cids = []\n",
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Safety check before accessing canvas\n        if self.ref_artist.figure is not None:\n            self._use_blit = use_blit and self.canvas.supports_blit\n            self.cids = [\n                self.canvas.callbacks._connect_picklable(\n                    'pick_event', self.on_pick),\n                self.canvas.callbacks._connect_picklable(\n                    'button_release_event', self.on_release),\n            ]\n        else:\n            self._use_blit = False\n            self.cids = []\n",
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Safety check before accessing canvas\n        if self.ref_artist.figure is not None:\n            self._use_blit = use_blit and self.canvas.supports_blit\n            self.cids = [\n                self.canvas.callbacks._connect_picklable(\n                    'pick_event', self.on_pick),\n                self.canvas.callbacks._connect_picklable(\n                    'button_release_event', self.on_release),\n            ]\n        else:\n            self._use_blit = False\n            self.cids = []\n",
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Safety check before accessing canvas\n        if self.ref_artist.figure is not None:\n            self._use_blit = use_blit and self.canvas.supports_blit\n            self.cids = [\n                self.canvas.callbacks._connect_picklable(\n                    'pick_event', self.on_pick),\n                self.canvas.callbacks._connect_picklable(\n                    'button_release_event', self.on_release),\n            ]\n        else:\n            self._use_blit = False\n            self.cids = []\n",
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Safety check before accessing canvas\n        if self.ref_artist.figure is not None:\n            self._use_blit = use_blit and self.canvas.supports_blit\n            self.cids = [\n                self.canvas.callbacks._connect_picklable(\n                    'pick_event', self.on_pick),\n                self.canvas.callbacks._connect_picklable(\n                    'button_release_event', self.on_release),\n            ]\n        else:\n            self._use_blit = False\n            self.cids = []\n",
      "\n    def __init__(self, ref_artist, use_blit=False):\n        self.ref_artist = ref_artist\n        if not ref_artist.pickable():\n            ref_artist.set_picker(True)\n        self.got_artist = False\n        \n        # Safety check before accessing canvas\n        if self.ref_artist.figure is not None:\n            self._use_blit = use_blit and self.canvas.supports_blit\n            self.cids = [\n                self.canvas.callbacks._connect_picklable(\n                    'pick_event', self.on_pick),\n                self.canvas.callbacks._connect_picklable(\n                    'button_release_event', self.on_release),\n            ]\n        else:\n            self._use_blit = False\n            self.cids = []\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..abcb5616b2 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,16 +1499,23 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+        # Safety check before accessing canvas\n+        if self.ref_artist.figure is not None:\n+            self._use_blit = use_blit and self.canvas.supports_blit\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n+        else:\n+            self._use_blit = False\n+            self.cids = []\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1549,6 +1556,7 @@ class DraggableBase:\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n+\n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n             self.disconnect()\n@@ -1556,16 +1564,18 @@ class DraggableBase:\n         else:\n             return True\n \n+\n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+        if self.ref_artist.figure is not None:\n+            for cid in self.cids:\n+                self.canvas.mpl_disconnect(cid)\n+            try:\n+                c1 = self._c1\n+            except AttributeError:\n+                pass\n+            else:\n+                self.canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_0": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..a50b1234a7 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,16 +1499,29 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+    def __init__(self, ref_artist, use_blit=False):\n+        self.ref_artist = ref_artist\n+        if not ref_artist.pickable():\n+            ref_artist.set_picker(True)\n+        self.got_artist = False\n+        \n+        # Safety check before accessing canvas\n+        if self.ref_artist.figure is not None:\n+            self._use_blit = use_blit and self.canvas.supports_blit\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n+        else:\n+            self._use_blit = False\n+            self.cids = []\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1549,6 +1562,7 @@ class DraggableBase:\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n+\n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n             self.disconnect()\n@@ -1556,16 +1570,18 @@ class DraggableBase:\n         else:\n             return True\n \n+\n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+        if self.ref_artist.figure is not None:\n+            for cid in self.cids:\n+                self.canvas.mpl_disconnect(cid)\n+            try:\n+                c1 = self._c1\n+            except AttributeError:\n+                pass\n+            else:\n+                self.canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_1": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..784bc8786a 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,16 +1499,29 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+    def __init__(self, ref_artist, use_blit=False):\n+        self.ref_artist = ref_artist\n+        if not ref_artist.pickable():\n+            ref_artist.set_picker(True)\n+        self.got_artist = False\n+        \n+        # Safety check before accessing canvas\n+        if self.ref_artist.figure is not None:\n+            self._use_blit = use_blit and self.canvas.supports_blit\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n+        else:\n+            self._use_blit = False\n+            self.cids = []\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1549,6 +1562,7 @@ class DraggableBase:\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n+\n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n             self.disconnect()\n@@ -1556,8 +1570,10 @@ class DraggableBase:\n         else:\n             return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    if self.ref_artist.figure is not None:\n         for cid in self.cids:\n             self.canvas.mpl_disconnect(cid)\n         try:\n",
    "variant_2": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..09c400f1fb 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,16 +1499,29 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+    def __init__(self, ref_artist, use_blit=False):\n+        self.ref_artist = ref_artist\n+        if not ref_artist.pickable():\n+            ref_artist.set_picker(True)\n+        self.got_artist = False\n+        \n+        # Safety check before accessing canvas\n+        if self.ref_artist.figure is not None:\n+            self._use_blit = use_blit and self.canvas.supports_blit\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n+        else:\n+            self._use_blit = False\n+            self.cids = []\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1549,15 +1562,18 @@ class DraggableBase:\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n-    def _check_still_parented(self):\n-        if self.ref_artist.figure is None:\n-            self.disconnect()\n-            return False\n-        else:\n-            return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+def _check_still_parented(self):\n+    if self.ref_artist.figure is None:\n+        self.disconnect()\n+        return False\n+    else:\n+        return True\n+\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    if self.ref_artist.figure is not None:\n         for cid in self.cids:\n             self.canvas.mpl_disconnect(cid)\n         try:\n",
    "variant_3": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..784bc8786a 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,16 +1499,29 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+    def __init__(self, ref_artist, use_blit=False):\n+        self.ref_artist = ref_artist\n+        if not ref_artist.pickable():\n+            ref_artist.set_picker(True)\n+        self.got_artist = False\n+        \n+        # Safety check before accessing canvas\n+        if self.ref_artist.figure is not None:\n+            self._use_blit = use_blit and self.canvas.supports_blit\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n+        else:\n+            self._use_blit = False\n+            self.cids = []\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1549,6 +1562,7 @@ class DraggableBase:\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n+\n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n             self.disconnect()\n@@ -1556,8 +1570,10 @@ class DraggableBase:\n         else:\n             return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    if self.ref_artist.figure is not None:\n         for cid in self.cids:\n             self.canvas.mpl_disconnect(cid)\n         try:\n",
    "variant_4": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..784bc8786a 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,16 +1499,29 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+    def __init__(self, ref_artist, use_blit=False):\n+        self.ref_artist = ref_artist\n+        if not ref_artist.pickable():\n+            ref_artist.set_picker(True)\n+        self.got_artist = False\n+        \n+        # Safety check before accessing canvas\n+        if self.ref_artist.figure is not None:\n+            self._use_blit = use_blit and self.canvas.supports_blit\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n+        else:\n+            self._use_blit = False\n+            self.cids = []\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1549,6 +1562,7 @@ class DraggableBase:\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n+\n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n             self.disconnect()\n@@ -1556,8 +1570,10 @@ class DraggableBase:\n         else:\n             return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    if self.ref_artist.figure is not None:\n         for cid in self.cids:\n             self.canvas.mpl_disconnect(cid)\n         try:\n",
    "variant_5": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..784bc8786a 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,16 +1499,29 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+    def __init__(self, ref_artist, use_blit=False):\n+        self.ref_artist = ref_artist\n+        if not ref_artist.pickable():\n+            ref_artist.set_picker(True)\n+        self.got_artist = False\n+        \n+        # Safety check before accessing canvas\n+        if self.ref_artist.figure is not None:\n+            self._use_blit = use_blit and self.canvas.supports_blit\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n+        else:\n+            self._use_blit = False\n+            self.cids = []\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1549,6 +1562,7 @@ class DraggableBase:\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n+\n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n             self.disconnect()\n@@ -1556,8 +1570,10 @@ class DraggableBase:\n         else:\n             return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n+\n+def disconnect(self):\n+    \"\"\"Disconnect the callbacks.\"\"\"\n+    if self.ref_artist.figure is not None:\n         for cid in self.cids:\n             self.canvas.mpl_disconnect(cid)\n         try:\n",
    "variant_6": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..81594b4246 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,16 +1499,30 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+    def __init__(self, ref_artist, use_blit=False):\n+        self.ref_artist = ref_artist\n+        if not ref_artist.pickable():\n+            ref_artist.set_picker(True)\n+        self.got_artist = False\n+        \n+        # Safety check before accessing canvas\n+        if self.ref_artist.figure is not None:\n+            self._use_blit = use_blit and self.canvas.supports_blit\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n+        else:\n+            self._use_blit = False\n+            self.cids = []\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+    # A property, not an attribute, to maintain picklability.\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1549,23 +1563,26 @@ class DraggableBase:\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n-    def _check_still_parented(self):\n-        if self.ref_artist.figure is None:\n-            self.disconnect()\n-            return False\n-        else:\n-            return True\n+\n+def _check_still_parented(self):\n+    if self.ref_artist.figure is None:\n+        self.disconnect()\n+        return False\n+    else:\n+        return True\n+\n \n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+        if self.ref_artist.figure is not None:\n+            for cid in self.cids:\n+                self.canvas.mpl_disconnect(cid)\n+            try:\n+                c1 = self._c1\n+            except AttributeError:\n+                pass\n+            else:\n+                self.canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_7": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..840d31f997 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,16 +1499,29 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+    def __init__(self, ref_artist, use_blit=False):\n+        self.ref_artist = ref_artist\n+        if not ref_artist.pickable():\n+            ref_artist.set_picker(True)\n+        self.got_artist = False\n+        \n+        # Safety check before accessing canvas\n+        if self.ref_artist.figure is not None:\n+            self._use_blit = use_blit and self.canvas.supports_blit\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n+        else:\n+            self._use_blit = False\n+            self.cids = []\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1549,23 +1562,26 @@ class DraggableBase:\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n-    def _check_still_parented(self):\n-        if self.ref_artist.figure is None:\n-            self.disconnect()\n-            return False\n-        else:\n-            return True\n+\n+def _check_still_parented(self):\n+    if self.ref_artist.figure is None:\n+        self.disconnect()\n+        return False\n+    else:\n+        return True\n+\n \n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+        if self.ref_artist.figure is not None:\n+            for cid in self.cids:\n+                self.canvas.mpl_disconnect(cid)\n+            try:\n+                c1 = self._c1\n+            except AttributeError:\n+                pass\n+            else:\n+                self.canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n",
    "variant_8": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..6f58341ed7 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,16 +1499,30 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+\n+    def __init__(self, ref_artist, use_blit=False):\n+        self.ref_artist = ref_artist\n+        if not ref_artist.pickable():\n+            ref_artist.set_picker(True)\n+        self.got_artist = False\n+        \n+        # Safety check before accessing canvas\n+        if self.ref_artist.figure is not None:\n+            self._use_blit = use_blit and self.canvas.supports_blit\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n+        else:\n+            self._use_blit = False\n+            self.cids = []\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n+    # A property, not an attribute, to maintain picklability.\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure is not None else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1549,6 +1563,7 @@ class DraggableBase:\n             if self._use_blit:\n                 self.ref_artist.set_animated(False)\n \n+\n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n             self.disconnect()\n@@ -1556,16 +1571,18 @@ class DraggableBase:\n         else:\n             return True\n \n+\n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+        if self.ref_artist.figure is not None:\n+            for cid in self.cids:\n+                self.canvas.mpl_disconnect(cid)\n+            try:\n+                c1 = self._c1\n+            except AttributeError:\n+                pass\n+            else:\n+                self.canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n"
  }
}