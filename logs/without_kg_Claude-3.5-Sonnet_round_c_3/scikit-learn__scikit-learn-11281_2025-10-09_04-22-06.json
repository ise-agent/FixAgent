{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/scikit-learn/sklearn/mixture/base.py lines 16-17)": "\nfrom ..base import BaseEstimator\nfrom ..base import DensityMixin\nfrom ..base import ClusterMixin\n",
    "Location 2 (/root/hy/projects_3/scikit-learn/sklearn/mixture/base.py lines 67-67)": "\nclass BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n",
    "Location 3 (/root/hy/projects_3/scikit-learn/sklearn/mixture/base.py lines 240-243)": "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/scikit-learn/sklearn/mixture/base.py lines 16-17)": [
      "\nfrom ..base import BaseEstimator\nfrom ..base import DensityMixin\nfrom ..base import ClusterMixin\n",
      "\nfrom ..base import BaseEstimator\nfrom ..base import DensityMixin\nfrom ..base import ClusterMixin\n",
      "\nfrom ..base import BaseEstimator\nfrom ..base import DensityMixin\nfrom ..base import ClusterMixin\n",
      "\nfrom ..base import BaseEstimator\nfrom ..base import DensityMixin\nfrom ..base import ClusterMixin\n",
      "\nfrom ..base import BaseEstimator\nfrom ..base import DensityMixin\nfrom ..base import ClusterMixin\n",
      "\nfrom ..base import BaseEstimator\nfrom ..base import DensityMixin\nfrom ..base import ClusterMixin\n",
      "\nfrom ..base import BaseEstimator\nfrom ..base import DensityMixin\nfrom ..base import ClusterMixin\n",
      "\nfrom ..base import BaseEstimator\nfrom ..base import DensityMixin\nfrom ..base import ClusterMixin\n"
    ],
    "Location 2 (/root/hy/projects_3/scikit-learn/sklearn/mixture/base.py lines 67-67)": [
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n",
      "\nclass BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n"
    ],
    "Location 3 (/root/hy/projects_3/scikit-learn/sklearn/mixture/base.py lines 240-243)": [
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n",
      "\n        self._set_parameters(best_params)\n        self.n_iter_ = best_n_iter\n        self.labels_ = self.predict(X)\n\n        return self\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..349f5b8ae 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -13,8 +13,10 @@ from time import time\n import numpy as np\n \n from .. import cluster\n+\n from ..base import BaseEstimator\n from ..base import DensityMixin\n+from ..base import ClusterMixin\n from ..externals import six\n from ..exceptions import ConvergenceWarning\n from ..utils import check_array, check_random_state\n@@ -64,7 +66,8 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n@@ -237,8 +240,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_0": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..349f5b8ae 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -13,8 +13,10 @@ from time import time\n import numpy as np\n \n from .. import cluster\n+\n from ..base import BaseEstimator\n from ..base import DensityMixin\n+from ..base import ClusterMixin\n from ..externals import six\n from ..exceptions import ConvergenceWarning\n from ..utils import check_array, check_random_state\n@@ -64,7 +66,8 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n@@ -237,8 +240,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_1": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..349f5b8ae 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -13,8 +13,10 @@ from time import time\n import numpy as np\n \n from .. import cluster\n+\n from ..base import BaseEstimator\n from ..base import DensityMixin\n+from ..base import ClusterMixin\n from ..externals import six\n from ..exceptions import ConvergenceWarning\n from ..utils import check_array, check_random_state\n@@ -64,7 +66,8 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n@@ -237,8 +240,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_2": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..349f5b8ae 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -13,8 +13,10 @@ from time import time\n import numpy as np\n \n from .. import cluster\n+\n from ..base import BaseEstimator\n from ..base import DensityMixin\n+from ..base import ClusterMixin\n from ..externals import six\n from ..exceptions import ConvergenceWarning\n from ..utils import check_array, check_random_state\n@@ -64,7 +66,8 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n@@ -237,8 +240,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_3": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..349f5b8ae 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -13,8 +13,10 @@ from time import time\n import numpy as np\n \n from .. import cluster\n+\n from ..base import BaseEstimator\n from ..base import DensityMixin\n+from ..base import ClusterMixin\n from ..externals import six\n from ..exceptions import ConvergenceWarning\n from ..utils import check_array, check_random_state\n@@ -64,7 +66,8 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n@@ -237,8 +240,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_4": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..349f5b8ae 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -13,8 +13,10 @@ from time import time\n import numpy as np\n \n from .. import cluster\n+\n from ..base import BaseEstimator\n from ..base import DensityMixin\n+from ..base import ClusterMixin\n from ..externals import six\n from ..exceptions import ConvergenceWarning\n from ..utils import check_array, check_random_state\n@@ -64,7 +66,8 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n@@ -237,8 +240,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_5": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..349f5b8ae 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -13,8 +13,10 @@ from time import time\n import numpy as np\n \n from .. import cluster\n+\n from ..base import BaseEstimator\n from ..base import DensityMixin\n+from ..base import ClusterMixin\n from ..externals import six\n from ..exceptions import ConvergenceWarning\n from ..utils import check_array, check_random_state\n@@ -64,7 +66,8 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n@@ -237,8 +240,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_6": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..349f5b8ae 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -13,8 +13,10 @@ from time import time\n import numpy as np\n \n from .. import cluster\n+\n from ..base import BaseEstimator\n from ..base import DensityMixin\n+from ..base import ClusterMixin\n from ..externals import six\n from ..exceptions import ConvergenceWarning\n from ..utils import check_array, check_random_state\n@@ -64,7 +66,8 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n@@ -237,8 +240,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_7": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..349f5b8ae 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -13,8 +13,10 @@ from time import time\n import numpy as np\n \n from .. import cluster\n+\n from ..base import BaseEstimator\n from ..base import DensityMixin\n+from ..base import ClusterMixin\n from ..externals import six\n from ..exceptions import ConvergenceWarning\n from ..utils import check_array, check_random_state\n@@ -64,7 +66,8 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n@@ -237,8 +240,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n",
    "variant_8": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..349f5b8ae 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -13,8 +13,10 @@ from time import time\n import numpy as np\n \n from .. import cluster\n+\n from ..base import BaseEstimator\n from ..base import DensityMixin\n+from ..base import ClusterMixin\n from ..externals import six\n from ..exceptions import ConvergenceWarning\n from ..utils import check_array, check_random_state\n@@ -64,7 +66,8 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+\n+class BaseMixture(six.with_metaclass(ABCMeta, ClusterMixin, DensityMixin, BaseEstimator)):\n     \"\"\"Base class for mixture models.\n \n     This abstract class specifies an interface for all mixture classes and\n@@ -237,8 +240,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n+\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n \n         return self\n \n"
  }
}