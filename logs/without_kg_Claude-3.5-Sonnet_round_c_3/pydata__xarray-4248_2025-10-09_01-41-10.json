{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/xarray/xarray/core/formatting.py lines 271-291)": "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
    "Location 2 (/root/hy/projects_3/xarray/xarray/core/formatting.py lines 308-309)": "\ndef summarize_variable(\n    name, var, col_width, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
    "Location 3 (/root/hy/projects_3/xarray/xarray/core/formatting.py lines 312-324)": "\ndef summarize_variable(\n    name, var, col_width, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
    "Location 4 (/root/hy/projects_3/xarray/xarray/core/formatting.py lines 376-378)": "\ndef summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n    \"\"\"Summarize a variable in one line, e.g., for use in dataset __repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = variable.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if len(first_col) < col_width:\n        spacing = \" \" * (col_width - len(first_col))\n    else:\n        spacing = \" \"\n    dims_str = f\"({', '.join(map(str, variable.dims))})\"\n    front_str = f\"{first_col}{spacing}{dims_str} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(variable, values_width)\n    return front_str + values_str\n",
    "Location 5 (/root/hy/projects_3/xarray/xarray/core/formatting.py lines 386-391)": "\ndef summarize_variable(name, var, col_width, marker=\" \"):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n    if variable._in_memory or variable.size < 1e5:\n        first_col = pretty_print(f\"  {marker} {name} \", col_width)\n    else:\n        first_col = pretty_print(f\"  {marker} {name} \", col_width)\n\n    dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n    front_str = f\"{first_col}{dims_str} \"\n    \n    # Extract units from variable attributes and add to display\n    units = var.attrs.get('units', '')\n    if units:\n        units_str = f\", in {units}\"\n        # Adjust available width for the units text\n        values_width = col_width - len(front_str) - len(units_str)\n    else:\n        units_str = \"\"\n        values_width = col_width - len(front_str)\n    \n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str + units_str\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/xarray/xarray/core/formatting.py lines 271-291)": [
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Extract units from variable attributes and format name with units\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Include units in the name if present\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n"
    ],
    "Location 2 (/root/hy/projects_3/xarray/xarray/core/formatting.py lines 308-309)": [
      "\ndef summarize_variable(\n    name, var, col_width, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_max_rows\"]\n    else:\n        max_width_options = max_width\n\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n\n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n\n    front_str = f\"  {marker} {name_with_units} \"\n    values_width = col_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + dims_str + values_str\n",
      "\ndef summarize_variable(\n    name, var, col_width, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Get units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name, var, col_width, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name, var, col_width, marker=\" \", max_width=None, is_index=False\n):\n    \"\"\"Summarize a variable in one line, e.g., for use in dataset __repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n\n\ndef summarize_datavar(name, var, col_width):\n    return summarize_variable(name, var.variable, col_width)\n",
      "\ndef summarize_variable(\n    name, var, col_width, marker=None, max_width=None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    marker = \" \" if marker is None else marker\n\n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n\n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n\n\ndef summarize_datavar(name, var, col_width):\n    return summarize_variable(name, var.variable, col_width)\n",
      "\ndef summarize_variable(\n    name, var, col_width, marker=\" \", max_width=None, is_index=False\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str) - (len(units) + 5 if units else 0)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name, var, col_width, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str) - (len(units) + 5 if units else 0)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name, var, col_width, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n"
    ],
    "Location 3 (/root/hy/projects_3/xarray/xarray/core/formatting.py lines 312-324)": [
      "\ndef summarize_variable(name, var, col_width, marker=\" \"):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if var.dims:\n        dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    front_str = f\"  {marker} {name_with_units} \"\n    values_width = col_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return f\"{front_str}{dims_str} {var.dtype} {values_str}\"\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \"):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n    if variable._in_memory or variable.size < 1e5:\n        first_col = _summarize_var_size_dtype(variable)\n    else:\n        first_col = f\"({', '.join(variable.dims)}) {variable.dtype}\"\n    \n    # Extract units from variable attributes\n    units = variable.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if variable.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, variable.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}\"\n    # Adjust width calculation to account for units text\n    available_width = col_width - len(front_str) if col_width is not None else None\n    values_width = available_width or 50\n    values_str = inline_variable_array_repr(variable, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name, var, col_width, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \"):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if var.dims:\n        dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    front_str = f\"  {marker} {name_with_units} {dims_str} \"\n    values_width = col_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name, var, col_width, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"] or 80\n        max_width = max_width_options\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}\"\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else str(name)\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \"):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n    \n    # Extract units from variable attributes\n    units = variable.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if variable.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, variable.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}\"\n    \n    # Adjust width calculation to account for units text\n    values_width = col_width - len(front_str) if col_width is not None else 0\n    values_str = format_array_flat(variable, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(\n    name, var, col_width, marker=\" \", max_width=None, is_index=False\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"] or 80\n        if col_width is not None:\n            max_width = max(max_width_options - col_width, 1)\n        else:\n            max_width = max_width_options\n    \n    # Get units from variable attributes\n    units = variable.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    dims_str = f\"({', '.join(map(str, var.dims))})\"\n    front_str = f\"{first_col}{dims_str} \"\n    \n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(variable, values_width)\n    \n    return front_str + values_str\n"
    ],
    "Location 4 (/root/hy/projects_3/xarray/xarray/core/formatting.py lines 376-378)": [
      "\ndef summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"] or 80\n        if col_width is not None:\n            max_width = max(max_width_options - col_width, 10)\n        else:\n            max_width = max_width_options\n    \n    # Extract units from variable attributes\n    units = variable.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if col_width is not None:\n        max_width -= len(first_col)\n    return first_col + summarize_variable_data(variable, max_width)\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\"\"):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n    \n    # Extract units from variable attributes\n    units = variable.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    if variable.dims:\n        dims_str = \"({})\".format(\", \".join(map(str, variable.dims)))\n    else:\n        dims_str = \"\"\n    \n    front_str = f\"  {marker} {name_with_units} \"\n    values_str = format_array_flat(variable, max_width=40).replace(\"\\n\", \" \")\n    \n    if variable.dtype.kind in \"US\":\n        values_str = f\"{values_str!r}\"\n    \n    first_col = pretty_print(f\"{front_str}{dims_str} \", col_width)\n    \n    # Adjust remaining width for the values, accounting for units text\n    remaining_width = col_width - len(first_col)\n    if remaining_width > 0:\n        values_str = values_str[:remaining_width]\n    \n    return first_col + values_str\n",
      "\ndef summarize_variable(\n    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \"):\n    \"\"\"Summarize a variable or coordinate for display in Dataset repr.\n    \n    Parameters\n    ----------\n    name : str\n        Variable name\n    var : Variable\n        Variable to summarize\n    col_width : int\n        Target column width for formatting\n    marker : str, optional\n        Marker character(s) to prefix the variable name\n        \n    Returns\n    -------\n    str\n        Formatted string representation of the variable\n    \"\"\"\n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max(col_width - len(front_str), 10)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    \n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \"):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if var.dims:\n        dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n\n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n\n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str} \"\n    values_width = max(1, col_width - len(front_str))\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n"
    ],
    "Location 5 (/root/hy/projects_3/xarray/xarray/core/formatting.py lines 386-391)": [
      "\ndef summarize_variable(name, var, col_width, marker=None):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if marker is None:\n        marker = \" \"\n    variable = getattr(var, \"variable\", var)\n    \n    # Extract units from variable attributes\n    units = variable.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if variable.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, variable.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}\"\n    \n    # Adjust width calculation to account for units text\n    values_width = max(10, col_width - len(front_str))\n    values_str = format_array_flat(variable, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width_options = OPTIONS[\"display_width\"]\n        if not isinstance(max_width_options, int):\n            raise TypeError(f\"`max_width` value of `{max_width_options}` is not a valid int\")\n        else:\n            max_width = max_width_options\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \"):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if var.dims:\n        dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n\n    front_str = f\"  {marker} {name} \"\n    \n    # Add units to the variable name if present in attributes\n    units = var.attrs.get('units', '')\n    if units:\n        front_str = f\"  {marker} {name}, in {units} \"\n\n    values_str = format_array_flat(var, col_width - len(front_str))\n    return front_str + dims_str + \" \" + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n    \"\"\"Summarize the given variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}\"\n    values_width = max_width - len(front_str)\n    values_str = format_array_flat(var, values_width)\n    return front_str + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \"):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n    if variable._in_memory:\n        array_str = short_array_repr(variable)\n    else:\n        array_str = f\"dask.array<chunksize={format_array_flat(variable, 0).split()[-1]}>\"\n\n    text = f\"({', '.join(variable.dims)}) {array_str}\"\n    \n    # Extract units from variable attributes if present\n    units = variable.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    if col_width is not None:\n        if col_width < len(name_with_units):\n            name_with_units = name_with_units[: col_width - 3] + \"...\"\n        first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    else:\n        first_col = pretty_print(f\"  {marker} {name_with_units} \", 0)\n\n    if len(first_col) > col_width:\n        indent = len(f\"  {marker} \") * \" \"\n        return f\"{first_col}\\n{indent}{text}\"\n    else:\n        return f\"{first_col}{text}\"\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    if max_width is None:\n        max_width = OPTIONS[\"display_width\"]\n    \n    # Extract units from variable attributes\n    units = var.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if var.dims:\n        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n    else:\n        dims_str = \"\"\n    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n\n    values_width = max_width - len(front_str)\n    values_str = inline_variable_array_repr(var, values_width)\n\n    return front_str + values_str\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \"):\n    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n    variable = getattr(var, \"variable\", var)\n    if variable._in_memory:\n        array = variable._data\n    else:\n        array = variable._data.data\n\n    dtype = array.dtype\n    shape = array.shape\n    has_array_function = hasattr(array, \"__array_function__\")\n\n    # Extract units from variable attributes\n    units = var.attrs.get('units', '') if hasattr(var, 'attrs') else variable.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n\n    if hasattr(array, \"chunks\"):\n        chunks_str = format_array_flat(array.chunks, \" \")\n        chunks_str = f\"({chunks_str})\"\n        array_type_str = f\"dask.array<chunksize={chunks_str}>\"\n    elif has_array_function or isinstance(array, sparse_array_type):\n        array_type_str = f\"{type(array).__name__}\"\n    elif hasattr(array, \"__array_function__\"):\n        array_type_str = f\"{type(array).__name__}\"\n    else:\n        array_type_str = \"numpy.ndarray\"\n\n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    if col_width is not None:\n        max_width = col_width - len(first_col) - 6\n        array_type_str = _truncate_at_width(array_type_str, max_width, \"...\")\n    return f\"{first_col}({', '.join([shape_str, array_type_str, dtype_str])}) {dims_str}\"\n",
      "\ndef summarize_variable(name, var, col_width, marker=\" \"):\n    \"\"\"Summarize a variable in one line, e.g., for use in dataset repr.\"\"\"\n    variable = getattr(var, \"variable\", var)\n    if variable._in_memory:\n        array = variable._data\n    else:\n        array = variable._data\n\n    units = variable.attrs.get('units', '')\n    name_with_units = f\"{name}, in {units}\" if units else name\n    \n    dtype = array.dtype\n    # TODO: should handle object dtypes more carefully\n    shape_str = format_array_flat(variable, max_width=15).replace(\" \", \"\")\n    if is_duck_dask_array(array):\n        preview = display_style = \"...\"\n    else:\n        preview = inline_variable_array_repr(variable, max_width=70)\n        display_style = \"bold\" if variable._in_memory else \"dimmed\"\n\n    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n    dims_start = col_width + 1\n    dims_width = max(col_width // 3, 30) + len(name_with_units) - len(name) if units else max(col_width // 3, 30)\n    second_col = pretty_print(f\"({', '.join(variable.dims)}) \", dims_width)\n    third_col = pretty_print(f\"{dtype} \", max(col_width // 5, 10))\n\n    return f\"{first_col}{second_col}{third_col}{preview}\"\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..ddeb88ca 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,12 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Extract units from variable attributes and format name with units if present\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -305,10 +311,12 @@ def _summarize_coord_levels(coord, col_width, marker=\"-\"):\n     )\n \n \n+\n def summarize_datavar(name, var, col_width):\n     return summarize_variable(name, var.variable, col_width)\n \n \n+\n def summarize_coord(name: Hashable, var, col_width: int):\n     is_index = name in var.dims\n     marker = \"*\" if is_index else \" \"\n@@ -373,6 +381,7 @@ def _mapping_repr(mapping, title, summarizer, col_width=None):\n     return \"\\n\".join(summary)\n \n \n+\n data_vars_repr = functools.partial(\n     _mapping_repr, title=\"Data variables\", summarizer=summarize_datavar\n )\n@@ -383,6 +392,7 @@ attrs_repr = functools.partial(\n )\n \n \n+\n def coords_repr(coords, col_width=None):\n     if col_width is None:\n         col_width = _calculate_col_width(_get_col_items(coords))\n",
    "variant_0": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..c1e949dd 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,12 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -305,23 +311,52 @@ def _summarize_coord_levels(coord, col_width, marker=\"-\"):\n     )\n \n \n-def summarize_datavar(name, var, col_width):\n-    return summarize_variable(name, var.variable, col_width)\n \n+def summarize_variable(\n+    name, var, col_width, marker: str = \" \", max_width: int = None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n \n-def summarize_coord(name: Hashable, var, col_width: int):\n-    is_index = name in var.dims\n-    marker = \"*\" if is_index else \" \"\n-    if is_index:\n-        coord = var.variable.to_index_variable()\n-        if coord.level_names is not None:\n-            return \"\\n\".join(\n-                [\n-                    _summarize_coord_multiindex(coord, col_width, marker),\n-                    _summarize_coord_levels(coord, col_width),\n-                ]\n-            )\n-    return summarize_variable(name, var.variable, col_width, marker)\n+\n+\n+def summarize_variable(\n+    name, var, col_width, marker: str = \" \", max_width: int = None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n \n \n def summarize_attr(key, value, col_width=None):\n@@ -373,9 +408,28 @@ def _mapping_repr(mapping, title, summarizer, col_width=None):\n     return \"\\n\".join(summary)\n \n \n-data_vars_repr = functools.partial(\n-    _mapping_repr, title=\"Data variables\", summarizer=summarize_datavar\n-)\n+\n+def summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n+    \"\"\"Summarize a variable in one line, e.g., for use in dataset __repr__.\"\"\"\n+    variable = getattr(var, \"variable\", var)\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = variable.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if len(first_col) < col_width:\n+        spacing = \" \" * (col_width - len(first_col))\n+    else:\n+        spacing = \" \"\n+    dims_str = f\"({', '.join(map(str, variable.dims))})\"\n+    front_str = f\"{first_col}{spacing}{dims_str} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(variable, values_width)\n+    return front_str + values_str\n \n \n attrs_repr = functools.partial(\n@@ -383,12 +437,30 @@ attrs_repr = functools.partial(\n )\n \n \n-def coords_repr(coords, col_width=None):\n-    if col_width is None:\n-        col_width = _calculate_col_width(_get_col_items(coords))\n-    return _mapping_repr(\n-        coords, title=\"Coordinates\", summarizer=summarize_coord, col_width=col_width\n-    )\n+\n+def summarize_variable(name, var, col_width, marker=\" \"):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    variable = getattr(var, \"variable\", var)\n+    if variable._in_memory or variable.size < 1e5:\n+        first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    else:\n+        first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+\n+    dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n+    front_str = f\"{first_col}{dims_str} \"\n+    \n+    # Extract units from variable attributes and add to display\n+    units = var.attrs.get('units', '')\n+    if units:\n+        units_str = f\", in {units}\"\n+        # Adjust available width for the units text\n+        values_width = col_width - len(front_str) - len(units_str)\n+    else:\n+        units_str = \"\"\n+        values_width = col_width - len(front_str)\n+    \n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str + units_str\n \n \n def indexes_repr(indexes):\n",
    "variant_1": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..dbc50a48 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,12 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -305,23 +311,49 @@ def _summarize_coord_levels(coord, col_width, marker=\"-\"):\n     )\n \n \n-def summarize_datavar(name, var, col_width):\n-    return summarize_variable(name, var.variable, col_width)\n \n+def summarize_variable(\n+    name, var, col_width, marker: str = \" \", max_width: int = None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width_options = OPTIONS[\"display_max_rows\"]\n+    else:\n+        max_width_options = max_width\n \n-def summarize_coord(name: Hashable, var, col_width: int):\n-    is_index = name in var.dims\n-    marker = \"*\" if is_index else \" \"\n-    if is_index:\n-        coord = var.variable.to_index_variable()\n-        if coord.level_names is not None:\n-            return \"\\n\".join(\n-                [\n-                    _summarize_coord_multiindex(coord, col_width, marker),\n-                    _summarize_coord_levels(coord, col_width),\n-                ]\n-            )\n-    return summarize_variable(name, var.variable, col_width, marker)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+\n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+\n+    front_str = f\"  {marker} {name_with_units} \"\n+    values_width = col_width - len(front_str)\n+    values_str = inline_variable_array_repr(var, values_width)\n+\n+    return front_str + dims_str + values_str\n+\n+\n+\n+def summarize_variable(name, var, col_width, marker=\" \"):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if var.dims:\n+        dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    front_str = f\"  {marker} {name_with_units} \"\n+    values_width = col_width - len(front_str)\n+    values_str = inline_variable_array_repr(var, values_width)\n+\n+    return f\"{front_str}{dims_str} {var.dtype} {values_str}\"\n \n \n def summarize_attr(key, value, col_width=None):\n@@ -373,9 +405,25 @@ def _mapping_repr(mapping, title, summarizer, col_width=None):\n     return \"\\n\".join(summary)\n \n \n-data_vars_repr = functools.partial(\n-    _mapping_repr, title=\"Data variables\", summarizer=summarize_datavar\n-)\n+\n+def summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    variable = getattr(var, \"variable\", var)\n+    if max_width is None:\n+        max_width_options = OPTIONS[\"display_width\"] or 80\n+        if col_width is not None:\n+            max_width = max(max_width_options - col_width, 10)\n+        else:\n+            max_width = max_width_options\n+    \n+    # Extract units from variable attributes\n+    units = variable.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if col_width is not None:\n+        max_width -= len(first_col)\n+    return first_col + summarize_variable_data(variable, max_width)\n \n \n attrs_repr = functools.partial(\n@@ -383,12 +431,28 @@ attrs_repr = functools.partial(\n )\n \n \n-def coords_repr(coords, col_width=None):\n-    if col_width is None:\n-        col_width = _calculate_col_width(_get_col_items(coords))\n-    return _mapping_repr(\n-        coords, title=\"Coordinates\", summarizer=summarize_coord, col_width=col_width\n-    )\n+\n+def summarize_variable(name, var, col_width, marker=None):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if marker is None:\n+        marker = \" \"\n+    variable = getattr(var, \"variable\", var)\n+    \n+    # Extract units from variable attributes\n+    units = variable.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if variable.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, variable.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}\"\n+    \n+    # Adjust width calculation to account for units text\n+    values_width = max(10, col_width - len(front_str))\n+    values_str = format_array_flat(variable, values_width)\n+    return front_str + values_str\n \n \n def indexes_repr(indexes):\n",
    "variant_2": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..22116afd 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,12 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -305,23 +311,54 @@ def _summarize_coord_levels(coord, col_width, marker=\"-\"):\n     )\n \n \n-def summarize_datavar(name, var, col_width):\n-    return summarize_variable(name, var.variable, col_width)\n \n+def summarize_variable(\n+    name, var, col_width, marker: str = \" \", max_width: int = None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Get units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n \n-def summarize_coord(name: Hashable, var, col_width: int):\n-    is_index = name in var.dims\n-    marker = \"*\" if is_index else \" \"\n-    if is_index:\n-        coord = var.variable.to_index_variable()\n-        if coord.level_names is not None:\n-            return \"\\n\".join(\n-                [\n-                    _summarize_coord_multiindex(coord, col_width, marker),\n-                    _summarize_coord_levels(coord, col_width),\n-                ]\n-            )\n-    return summarize_variable(name, var.variable, col_width, marker)\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n+\n+\n+\n+def summarize_variable(name, var, col_width, marker=\" \"):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    variable = getattr(var, \"variable\", var)\n+    if variable._in_memory or variable.size < 1e5:\n+        first_col = _summarize_var_size_dtype(variable)\n+    else:\n+        first_col = f\"({', '.join(variable.dims)}) {variable.dtype}\"\n+    \n+    # Extract units from variable attributes\n+    units = variable.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if variable.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, variable.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}\"\n+    # Adjust width calculation to account for units text\n+    available_width = col_width - len(front_str) if col_width is not None else None\n+    values_width = available_width or 50\n+    values_str = inline_variable_array_repr(variable, values_width)\n+    return front_str + values_str\n \n \n def summarize_attr(key, value, col_width=None):\n@@ -373,9 +410,26 @@ def _mapping_repr(mapping, title, summarizer, col_width=None):\n     return \"\\n\".join(summary)\n \n \n-data_vars_repr = functools.partial(\n-    _mapping_repr, title=\"Data variables\", summarizer=summarize_datavar\n-)\n+\n+def summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n \n \n attrs_repr = functools.partial(\n@@ -383,12 +437,30 @@ attrs_repr = functools.partial(\n )\n \n \n-def coords_repr(coords, col_width=None):\n-    if col_width is None:\n-        col_width = _calculate_col_width(_get_col_items(coords))\n-    return _mapping_repr(\n-        coords, title=\"Coordinates\", summarizer=summarize_coord, col_width=col_width\n-    )\n+\n+def summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width_options = OPTIONS[\"display_width\"]\n+        if not isinstance(max_width_options, int):\n+            raise TypeError(f\"`max_width` value of `{max_width_options}` is not a valid int\")\n+        else:\n+            max_width = max_width_options\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n \n \n def indexes_repr(indexes):\n",
    "variant_3": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..f40cad61 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,12 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -305,23 +311,54 @@ def _summarize_coord_levels(coord, col_width, marker=\"-\"):\n     )\n \n \n-def summarize_datavar(name, var, col_width):\n-    return summarize_variable(name, var.variable, col_width)\n \n+def summarize_variable(\n+    name, var, col_width, marker: str = \" \", max_width: int = None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n \n-def summarize_coord(name: Hashable, var, col_width: int):\n-    is_index = name in var.dims\n-    marker = \"*\" if is_index else \" \"\n-    if is_index:\n-        coord = var.variable.to_index_variable()\n-        if coord.level_names is not None:\n-            return \"\\n\".join(\n-                [\n-                    _summarize_coord_multiindex(coord, col_width, marker),\n-                    _summarize_coord_levels(coord, col_width),\n-                ]\n-            )\n-    return summarize_variable(name, var.variable, col_width, marker)\n+    values_width = max_width - len(front_str)\n+    values_str = inline_variable_array_repr(var, values_width)\n+\n+    return front_str + values_str\n+\n+\n+\n+def summarize_variable(\n+    name, var, col_width, marker: str = \" \", max_width: int = None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = inline_variable_array_repr(var, values_width)\n+\n+    return front_str + values_str\n \n \n def summarize_attr(key, value, col_width=None):\n@@ -373,9 +410,34 @@ def _mapping_repr(mapping, title, summarizer, col_width=None):\n     return \"\\n\".join(summary)\n \n \n-data_vars_repr = functools.partial(\n-    _mapping_repr, title=\"Data variables\", summarizer=summarize_datavar\n-)\n+\n+def summarize_variable(name, var, col_width, marker=\"\"):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    variable = getattr(var, \"variable\", var)\n+    \n+    # Extract units from variable attributes\n+    units = variable.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    if variable.dims:\n+        dims_str = \"({})\".format(\", \".join(map(str, variable.dims)))\n+    else:\n+        dims_str = \"\"\n+    \n+    front_str = f\"  {marker} {name_with_units} \"\n+    values_str = format_array_flat(variable, max_width=40).replace(\"\\n\", \" \")\n+    \n+    if variable.dtype.kind in \"US\":\n+        values_str = f\"{values_str!r}\"\n+    \n+    first_col = pretty_print(f\"{front_str}{dims_str} \", col_width)\n+    \n+    # Adjust remaining width for the values, accounting for units text\n+    remaining_width = col_width - len(first_col)\n+    if remaining_width > 0:\n+        values_str = values_str[:remaining_width]\n+    \n+    return first_col + values_str\n \n \n attrs_repr = functools.partial(\n@@ -383,12 +445,23 @@ attrs_repr = functools.partial(\n )\n \n \n-def coords_repr(coords, col_width=None):\n-    if col_width is None:\n-        col_width = _calculate_col_width(_get_col_items(coords))\n-    return _mapping_repr(\n-        coords, title=\"Coordinates\", summarizer=summarize_coord, col_width=col_width\n-    )\n+\n+def summarize_variable(name, var, col_width, marker=\" \"):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if var.dims:\n+        dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+\n+    front_str = f\"  {marker} {name} \"\n+    \n+    # Add units to the variable name if present in attributes\n+    units = var.attrs.get('units', '')\n+    if units:\n+        front_str = f\"  {marker} {name}, in {units} \"\n+\n+    values_str = format_array_flat(var, col_width - len(front_str))\n+    return front_str + dims_str + \" \" + values_str\n \n \n def indexes_repr(indexes):\n",
    "variant_4": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..5d063fa2 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,12 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -305,23 +311,51 @@ def _summarize_coord_levels(coord, col_width, marker=\"-\"):\n     )\n \n \n+\n+def summarize_variable(\n+    name, var, col_width, marker=\" \", max_width=None, is_index=False\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for use in dataset __repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n+\n+\n def summarize_datavar(name, var, col_width):\n     return summarize_variable(name, var.variable, col_width)\n \n \n-def summarize_coord(name: Hashable, var, col_width: int):\n-    is_index = name in var.dims\n-    marker = \"*\" if is_index else \" \"\n-    if is_index:\n-        coord = var.variable.to_index_variable()\n-        if coord.level_names is not None:\n-            return \"\\n\".join(\n-                [\n-                    _summarize_coord_multiindex(coord, col_width, marker),\n-                    _summarize_coord_levels(coord, col_width),\n-                ]\n-            )\n-    return summarize_variable(name, var.variable, col_width, marker)\n+\n+def summarize_variable(name, var, col_width, marker=\" \"):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if var.dims:\n+        dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    front_str = f\"  {marker} {name_with_units} {dims_str} \"\n+    values_width = col_width - len(front_str)\n+    values_str = inline_variable_array_repr(var, values_width)\n+\n+    return front_str + values_str\n \n \n def summarize_attr(key, value, col_width=None):\n@@ -373,9 +407,28 @@ def _mapping_repr(mapping, title, summarizer, col_width=None):\n     return \"\\n\".join(summary)\n \n \n-data_vars_repr = functools.partial(\n-    _mapping_repr, title=\"Data variables\", summarizer=summarize_datavar\n-)\n+\n+def summarize_variable(\n+    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n \n \n attrs_repr = functools.partial(\n@@ -383,12 +436,25 @@ attrs_repr = functools.partial(\n )\n \n \n-def coords_repr(coords, col_width=None):\n-    if col_width is None:\n-        col_width = _calculate_col_width(_get_col_items(coords))\n-    return _mapping_repr(\n-        coords, title=\"Coordinates\", summarizer=summarize_coord, col_width=col_width\n-    )\n+\n+def summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n+    \"\"\"Summarize the given variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}\"\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n \n \n def indexes_repr(indexes):\n",
    "variant_5": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..b504422a 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,12 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -305,23 +311,57 @@ def _summarize_coord_levels(coord, col_width, marker=\"-\"):\n     )\n \n \n+\n+def summarize_variable(\n+    name, var, col_width, marker=None, max_width=None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    marker = \" \" if marker is None else marker\n+\n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+\n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n+\n+\n def summarize_datavar(name, var, col_width):\n     return summarize_variable(name, var.variable, col_width)\n \n \n-def summarize_coord(name: Hashable, var, col_width: int):\n-    is_index = name in var.dims\n-    marker = \"*\" if is_index else \" \"\n-    if is_index:\n-        coord = var.variable.to_index_variable()\n-        if coord.level_names is not None:\n-            return \"\\n\".join(\n-                [\n-                    _summarize_coord_multiindex(coord, col_width, marker),\n-                    _summarize_coord_levels(coord, col_width),\n-                ]\n-            )\n-    return summarize_variable(name, var.variable, col_width, marker)\n+\n+def summarize_variable(\n+    name, var, col_width, marker: str = \" \", max_width: int = None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width_options = OPTIONS[\"display_width\"] or 80\n+        max_width = max_width_options\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}\"\n+    values_width = max_width - len(front_str)\n+    values_str = inline_variable_array_repr(var, values_width)\n+    return front_str + values_str\n \n \n def summarize_attr(key, value, col_width=None):\n@@ -373,9 +413,40 @@ def _mapping_repr(mapping, title, summarizer, col_width=None):\n     return \"\\n\".join(summary)\n \n \n-data_vars_repr = functools.partial(\n-    _mapping_repr, title=\"Data variables\", summarizer=summarize_datavar\n-)\n+\n+def summarize_variable(name, var, col_width, marker=\" \"):\n+    \"\"\"Summarize a variable or coordinate for display in Dataset repr.\n+    \n+    Parameters\n+    ----------\n+    name : str\n+        Variable name\n+    var : Variable\n+        Variable to summarize\n+    col_width : int\n+        Target column width for formatting\n+    marker : str, optional\n+        Marker character(s) to prefix the variable name\n+        \n+    Returns\n+    -------\n+    str\n+        Formatted string representation of the variable\n+    \"\"\"\n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max(col_width - len(front_str), 10)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n \n \n attrs_repr = functools.partial(\n@@ -383,12 +454,33 @@ attrs_repr = functools.partial(\n )\n \n \n-def coords_repr(coords, col_width=None):\n-    if col_width is None:\n-        col_width = _calculate_col_width(_get_col_items(coords))\n-    return _mapping_repr(\n-        coords, title=\"Coordinates\", summarizer=summarize_coord, col_width=col_width\n-    )\n+\n+def summarize_variable(name, var, col_width, marker=\" \"):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    variable = getattr(var, \"variable\", var)\n+    if variable._in_memory:\n+        array_str = short_array_repr(variable)\n+    else:\n+        array_str = f\"dask.array<chunksize={format_array_flat(variable, 0).split()[-1]}>\"\n+\n+    text = f\"({', '.join(variable.dims)}) {array_str}\"\n+    \n+    # Extract units from variable attributes if present\n+    units = variable.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    if col_width is not None:\n+        if col_width < len(name_with_units):\n+            name_with_units = name_with_units[: col_width - 3] + \"...\"\n+        first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    else:\n+        first_col = pretty_print(f\"  {marker} {name_with_units} \", 0)\n+\n+    if len(first_col) > col_width:\n+        indent = len(f\"  {marker} \") * \" \"\n+        return f\"{first_col}\\n{indent}{text}\"\n+    else:\n+        return f\"{first_col}{text}\"\n \n \n def indexes_repr(indexes):\n",
    "variant_6": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..08d149be 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,12 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Extract units from variable attributes and format name with units\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -305,23 +311,52 @@ def _summarize_coord_levels(coord, col_width, marker=\"-\"):\n     )\n \n \n-def summarize_datavar(name, var, col_width):\n-    return summarize_variable(name, var.variable, col_width)\n \n+def summarize_variable(\n+    name, var, col_width, marker=\" \", max_width=None, is_index=False\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n \n-def summarize_coord(name: Hashable, var, col_width: int):\n-    is_index = name in var.dims\n-    marker = \"*\" if is_index else \" \"\n-    if is_index:\n-        coord = var.variable.to_index_variable()\n-        if coord.level_names is not None:\n-            return \"\\n\".join(\n-                [\n-                    _summarize_coord_multiindex(coord, col_width, marker),\n-                    _summarize_coord_levels(coord, col_width),\n-                ]\n-            )\n-    return summarize_variable(name, var.variable, col_width, marker)\n+    values_width = max_width - len(front_str) - (len(units) + 5 if units else 0)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n+\n+\n+\n+def summarize_variable(\n+    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else str(name)\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n \n \n def summarize_attr(key, value, col_width=None):\n@@ -373,9 +408,28 @@ def _mapping_repr(mapping, title, summarizer, col_width=None):\n     return \"\\n\".join(summary)\n \n \n-data_vars_repr = functools.partial(\n-    _mapping_repr, title=\"Data variables\", summarizer=summarize_datavar\n-)\n+\n+def summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    \n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = inline_variable_array_repr(var, values_width)\n+\n+    return front_str + values_str\n \n \n attrs_repr = functools.partial(\n@@ -383,12 +437,27 @@ attrs_repr = functools.partial(\n )\n \n \n-def coords_repr(coords, col_width=None):\n-    if col_width is None:\n-        col_width = _calculate_col_width(_get_col_items(coords))\n-    return _mapping_repr(\n-        coords, title=\"Coordinates\", summarizer=summarize_coord, col_width=col_width\n-    )\n+\n+def summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = inline_variable_array_repr(var, values_width)\n+\n+    return front_str + values_str\n \n \n def indexes_repr(indexes):\n",
    "variant_7": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..a954d162 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,12 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Include units in the name if present\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -305,23 +311,50 @@ def _summarize_coord_levels(coord, col_width, marker=\"-\"):\n     )\n \n \n-def summarize_datavar(name, var, col_width):\n-    return summarize_variable(name, var.variable, col_width)\n+\n+def summarize_variable(\n+    name, var, col_width, marker: str = \" \", max_width: int = None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str) - (len(units) + 5 if units else 0)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n+\n \n \n-def summarize_coord(name: Hashable, var, col_width: int):\n-    is_index = name in var.dims\n-    marker = \"*\" if is_index else \" \"\n-    if is_index:\n-        coord = var.variable.to_index_variable()\n-        if coord.level_names is not None:\n-            return \"\\n\".join(\n-                [\n-                    _summarize_coord_multiindex(coord, col_width, marker),\n-                    _summarize_coord_levels(coord, col_width),\n-                ]\n-            )\n-    return summarize_variable(name, var.variable, col_width, marker)\n+def summarize_variable(name, var, col_width, marker=\" \"):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    variable = getattr(var, \"variable\", var)\n+    \n+    # Extract units from variable attributes\n+    units = variable.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if variable.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, variable.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}\"\n+    \n+    # Adjust width calculation to account for units text\n+    values_width = col_width - len(front_str) if col_width is not None else 0\n+    values_str = format_array_flat(variable, values_width)\n+    return front_str + values_str\n \n \n def summarize_attr(key, value, col_width=None):\n@@ -373,9 +406,26 @@ def _mapping_repr(mapping, title, summarizer, col_width=None):\n     return \"\\n\".join(summary)\n \n \n-data_vars_repr = functools.partial(\n-    _mapping_repr, title=\"Data variables\", summarizer=summarize_datavar\n-)\n+\n+def summarize_variable(name, var, col_width, marker=\" \", max_width=None):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n \n \n attrs_repr = functools.partial(\n@@ -383,12 +433,39 @@ attrs_repr = functools.partial(\n )\n \n \n-def coords_repr(coords, col_width=None):\n-    if col_width is None:\n-        col_width = _calculate_col_width(_get_col_items(coords))\n-    return _mapping_repr(\n-        coords, title=\"Coordinates\", summarizer=summarize_coord, col_width=col_width\n-    )\n+\n+def summarize_variable(name, var, col_width, marker=\" \"):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    variable = getattr(var, \"variable\", var)\n+    if variable._in_memory:\n+        array = variable._data\n+    else:\n+        array = variable._data.data\n+\n+    dtype = array.dtype\n+    shape = array.shape\n+    has_array_function = hasattr(array, \"__array_function__\")\n+\n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '') if hasattr(var, 'attrs') else variable.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+\n+    if hasattr(array, \"chunks\"):\n+        chunks_str = format_array_flat(array.chunks, \" \")\n+        chunks_str = f\"({chunks_str})\"\n+        array_type_str = f\"dask.array<chunksize={chunks_str}>\"\n+    elif has_array_function or isinstance(array, sparse_array_type):\n+        array_type_str = f\"{type(array).__name__}\"\n+    elif hasattr(array, \"__array_function__\"):\n+        array_type_str = f\"{type(array).__name__}\"\n+    else:\n+        array_type_str = \"numpy.ndarray\"\n+\n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if col_width is not None:\n+        max_width = col_width - len(first_col) - 6\n+        array_type_str = _truncate_at_width(array_type_str, max_width, \"...\")\n+    return f\"{first_col}({', '.join([shape_str, array_type_str, dtype_str])}) {dims_str}\"\n \n \n def indexes_repr(indexes):\n",
    "variant_8": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..dc915f4f 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -268,6 +268,7 @@ def inline_variable_array_repr(var, max_width):\n         return \"...\"\n \n \n+\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n@@ -278,7 +279,12 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -305,23 +311,55 @@ def _summarize_coord_levels(coord, col_width, marker=\"-\"):\n     )\n \n \n-def summarize_datavar(name, var, col_width):\n-    return summarize_variable(name, var.variable, col_width)\n \n+def summarize_variable(\n+    name, var, col_width, marker: str = \" \", max_width: int = None\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if max_width is None:\n+        max_width = OPTIONS[\"display_width\"]\n+    \n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    values_width = max_width - len(front_str)\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n \n-def summarize_coord(name: Hashable, var, col_width: int):\n-    is_index = name in var.dims\n-    marker = \"*\" if is_index else \" \"\n-    if is_index:\n-        coord = var.variable.to_index_variable()\n-        if coord.level_names is not None:\n-            return \"\\n\".join(\n-                [\n-                    _summarize_coord_multiindex(coord, col_width, marker),\n-                    _summarize_coord_levels(coord, col_width),\n-                ]\n-            )\n-    return summarize_variable(name, var.variable, col_width, marker)\n+\n+\n+def summarize_variable(\n+    name, var, col_width, marker=\" \", max_width=None, is_index=False\n+):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    variable = getattr(var, \"variable\", var)\n+    if max_width is None:\n+        max_width_options = OPTIONS[\"display_width\"] or 80\n+        if col_width is not None:\n+            max_width = max(max_width_options - col_width, 1)\n+        else:\n+            max_width = max_width_options\n+    \n+    # Get units from variable attributes\n+    units = variable.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    dims_str = f\"({', '.join(map(str, var.dims))})\"\n+    front_str = f\"{first_col}{dims_str} \"\n+    \n+    values_width = max_width - len(front_str)\n+    values_str = inline_variable_array_repr(variable, values_width)\n+    \n+    return front_str + values_str\n \n \n def summarize_attr(key, value, col_width=None):\n@@ -373,9 +411,27 @@ def _mapping_repr(mapping, title, summarizer, col_width=None):\n     return \"\\n\".join(summary)\n \n \n-data_vars_repr = functools.partial(\n-    _mapping_repr, title=\"Data variables\", summarizer=summarize_datavar\n-)\n+\n+def summarize_variable(name, var, col_width, marker=\" \"):\n+    \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n+    if var.dims:\n+        dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+\n+    # Extract units from variable attributes\n+    units = var.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+\n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    if var.dims:\n+        dims_str = \"({})\".format(\", \".join(map(str, var.dims)))\n+    else:\n+        dims_str = \"\"\n+    front_str = f\"{first_col}{dims_str} \"\n+    values_width = max(1, col_width - len(front_str))\n+    values_str = format_array_flat(var, values_width)\n+    return front_str + values_str\n \n \n attrs_repr = functools.partial(\n@@ -383,12 +439,34 @@ attrs_repr = functools.partial(\n )\n \n \n-def coords_repr(coords, col_width=None):\n-    if col_width is None:\n-        col_width = _calculate_col_width(_get_col_items(coords))\n-    return _mapping_repr(\n-        coords, title=\"Coordinates\", summarizer=summarize_coord, col_width=col_width\n-    )\n+\n+def summarize_variable(name, var, col_width, marker=\" \"):\n+    \"\"\"Summarize a variable in one line, e.g., for use in dataset repr.\"\"\"\n+    variable = getattr(var, \"variable\", var)\n+    if variable._in_memory:\n+        array = variable._data\n+    else:\n+        array = variable._data\n+\n+    units = variable.attrs.get('units', '')\n+    name_with_units = f\"{name}, in {units}\" if units else name\n+    \n+    dtype = array.dtype\n+    # TODO: should handle object dtypes more carefully\n+    shape_str = format_array_flat(variable, max_width=15).replace(\" \", \"\")\n+    if is_duck_dask_array(array):\n+        preview = display_style = \"...\"\n+    else:\n+        preview = inline_variable_array_repr(variable, max_width=70)\n+        display_style = \"bold\" if variable._in_memory else \"dimmed\"\n+\n+    first_col = pretty_print(f\"  {marker} {name_with_units} \", col_width)\n+    dims_start = col_width + 1\n+    dims_width = max(col_width // 3, 30) + len(name_with_units) - len(name) if units else max(col_width // 3, 30)\n+    second_col = pretty_print(f\"({', '.join(variable.dims)}) \", dims_width)\n+    third_col = pretty_print(f\"{dtype} \", max(col_width // 5, 10))\n+\n+    return f\"{first_col}{second_col}{third_col}{preview}\"\n \n \n def indexes_repr(indexes):\n"
  }
}