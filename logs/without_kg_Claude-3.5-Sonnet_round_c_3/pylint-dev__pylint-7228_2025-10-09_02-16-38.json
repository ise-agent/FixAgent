{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/pylint/pylint/config/argument.py lines 133-133)": "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex  # type: ignore[import-untyped]\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Unicode property escapes (\\\\p{{...}}) in pattern '{pattern}' \"\n                \"require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _unicode_aware_compile,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
    "Location 2 (/root/hy/projects_3/pylint/pylint/config/option.py lines 23-26)": "\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    \n    # Try to use regex module for Unicode property support, fall back to re\n    try:\n        import regex\n        return regex.compile(value)\n    except ImportError:\n        # Check if the pattern contains Unicode properties that re doesn't support\n        if '\\\\p{' in value:\n            raise ValueError(\n                f\"Pattern '{value}' contains Unicode properties (\\\\p{{...}}) which are not supported by Python's re module. \"\n                \"Please install the 'regex' module for Unicode property support: pip install regex\"\n            )\n        return re.compile(value)\n",
    "Location 3 (/root/hy/projects_3/pylint/pylint/config/option.py lines 106-106)": "\ndef _compile_unicode_regex(pattern):\n    \"\"\"Compile a regex pattern with Unicode property support.\n    \n    Falls back to standard re module if regex module is not available.\n    \"\"\"\n    if not pattern:\n        pattern = \"\"\n    \n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern:\n            raise optparse.OptionValueError(\n                f\"Unicode property escapes like '\\\\p{{}}' are not supported. \"\n                f\"Install the 'regex' module for Unicode property support, \"\n                f\"or use standard regex patterns.\"\n            )\n        return re.compile(pattern)\n\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _compile_unicode_regex,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
    "Location 4 (/root/hy/projects_3/pylint/pylint/config/argument.py lines 103-107)": "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode property escapes\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n                \"which require the 'regex' module. Please install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_unicode_aware_compile(pattern))\n    return patterns\n",
    "Location 5 (/root/hy/projects_3/pylint/pylint/config/argument.py lines 112-119)": "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            raise ValueError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n                \"Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(\n            _unicode_aware_compile(\n                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                + \"|\"\n                + pathlib.PureWindowsPath(pattern).as_posix()\n            )\n        )\n    return patterns\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/pylint/pylint/config/argument.py lines 133-133)": [
      "\ndef _unicode_aware_compile(pattern: str | Pattern[str]) -> Pattern[str]:\n    \"\"\"Compile regex pattern with Unicode property support.\n    \n    Attempts to use the regex module for Unicode properties like \\p{Han}.\n    Falls back to re module with clear error message if regex is unavailable.\n    \"\"\"\n    if hasattr(pattern, 'pattern'):  # Already compiled\n        return pattern\n    \n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if '\\\\p{' in pattern:\n            raise ValueError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) \"\n                \"which require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _unicode_aware_compile,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile regex pattern with Unicode property support.\"\"\"\n    try:\n        import regex  # type: ignore[import]\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            raise ValueError(\n                f\"Unicode property escapes like \\\\p{{...}} in pattern '{pattern}' \"\n                \"require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _unicode_aware_compile,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode property escapes\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Unicode property escapes (\\\\p{{...}}) in pattern '{pattern}' \"\n                \"require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _unicode_aware_compile,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n    try:\n        import regex  # type: ignore[import]\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Unicode property escapes (like \\\\p{{Han}}) in pattern '{pattern}' \"\n                \"require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _unicode_aware_compile,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex  # type: ignore[import-untyped]\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if \"\\\\p{\" in pattern:\n            raise ValueError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) \"\n                \"which require the 'regex' package. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _unicode_aware_compile,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern uses Unicode properties\n        if \"\\\\p{\" in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Pattern '{pattern}' uses Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n                \"Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _unicode_aware_compile,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support.\n    \n    Attempts to use the 'regex' module which supports Unicode properties like \\p{Han}.\n    Falls back to 're' module if 'regex' is not available.\n    \"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern:\n            raise ValueError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n                f\"Please install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _unicode_aware_compile,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n    try:\n        import regex  # type: ignore[import]\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n            raise ValueError(\n                f\"Unicode property escapes (like \\\\p{{Han}}) are not supported by Python's \"\n                f\"built-in re module. Please install the 'regex' package for Unicode support, \"\n                f\"or modify your pattern '{pattern}' to use standard regex syntax.\"\n            )\n        return re.compile(pattern)\n\n_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n    \"choice\": str,\n    \"csv\": _csv_transformer,\n    \"float\": float,\n    \"int\": int,\n    \"confidence\": _confidence_transformer,\n    \"non_empty_string\": _non_empty_string_transformer,\n    \"path\": _path_transformer,\n    \"py_version\": _py_version_transformer,\n    \"regexp\": _unicode_aware_compile,\n    \"regexp_csv\": _regexp_csv_transfomer,\n    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n    \"string\": pylint_utils._unquote,\n    \"yn\": _yn_transformer,\n}\n"
    ],
    "Location 2 (/root/hy/projects_3/pylint/pylint/config/option.py lines 23-26)": [
      "\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        import regex\n        return regex.compile(value)\n    except ImportError:\n        try:\n            return re.compile(value)\n        except re.error as e:\n            if r'\\p{' in value:\n                raise re.error(\n                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n                ) from e\n            raise\n",
      "\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        import regex\n        return regex.compile(value)\n    except ImportError:\n        try:\n            return re.compile(value)\n        except re.error as e:\n            if r'\\p{' in value:\n                raise ValueError(\n                    f\"Unicode property escapes like '\\\\p{{}}' are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n                ) from e\n            raise\n",
      "\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        import regex\n        return regex.compile(value)\n    except ImportError:\n        try:\n            return re.compile(value)\n        except re.error as e:\n            if r'\\p{' in value:\n                raise re.error(\n                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n                ) from e\n            raise\n",
      "\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        import regex\n        return regex.compile(value)\n    except ImportError:\n        try:\n            return re.compile(value)\n        except re.error as e:\n            if \"\\\\p{\" in value:\n                raise ValueError(\n                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n                ) from e\n            raise\n",
      "\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        import regex\n        return regex.compile(value)\n    except ImportError:\n        try:\n            return re.compile(value)\n        except re.error as e:\n            if r'\\p{' in value:\n                raise ValueError(\n                    f\"Unicode property escapes like '\\\\p{{}}' are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n                ) from e\n            raise\n",
      "\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        import regex\n        return regex.compile(value)\n    except ImportError:\n        try:\n            return re.compile(value)\n        except re.error as e:\n            if \"\\\\p{\" in value:\n                raise ValueError(\n                    f\"Unicode property escapes like \\\\p{{}} are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n                ) from e\n            raise\n",
      "\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        import regex\n        return regex.compile(value)\n    except ImportError:\n        try:\n            return re.compile(value)\n        except re.error as e:\n            if r'\\p{' in value:\n                raise ValueError(\n                    f\"Unicode property escapes like '\\\\p{{}}' are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n                ) from e\n            raise\n",
      "\ndef _regexp_validator(_, name, value):\n    if hasattr(value, \"pattern\"):\n        return value\n    try:\n        import regex\n        return regex.compile(value)\n    except ImportError:\n        try:\n            return re.compile(value)\n        except re.error as e:\n            if r'\\p{' in value:\n                raise ValueError(\n                    f\"Unicode property escapes like '\\\\p{{}}' are not supported by Python's re module. \"\n                    f\"Please install the 'regex' package: pip install regex\"\n                ) from e\n            raise\n"
    ],
    "Location 3 (/root/hy/projects_3/pylint/pylint/config/option.py lines 106-106)": [
      "\ndef _compile_unicode_regex(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support.\n    \n    First tries to use the 'regex' module which supports Unicode properties like \\p{Han}.\n    Falls back to standard 're' module if 'regex' is not available.\n    \"\"\"\n    if not pattern:\n        pattern = \"\"\n    \n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern:\n            raise optparse.OptionValueError(\n                f\"Unicode property escapes like '\\\\p{{...}}' in pattern '{pattern}' \"\n                \"require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _compile_unicode_regex,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _compile_regexp_with_unicode_support(pattern):\n    \"\"\"Compile a regular expression pattern with Unicode property support.\n    \n    Attempts to use the regex module for Unicode property support,\n    falls back to re module with a helpful error message.\n    \"\"\"\n    if not pattern:\n        pattern = \"\"\n    \n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern:\n            raise optparse.OptionValueError(\n                f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n                \"which require the 'regex' module. Please install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _compile_regexp_with_unicode_support,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _unicode_aware_compile(pattern):\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    if not pattern:\n        pattern = \"\"\n    \n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode property escapes\n        if r'\\p{' in pattern:\n            raise optparse.OptionValueError(\n                f\"Unicode property escapes like '\\\\p{{}}' are not supported. \"\n                f\"Please install the 'regex' package or use standard regex syntax.\"\n            ) from None\n        return re.compile(pattern)\n\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _unicode_aware_compile,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _compile_unicode_regex(pattern):\n    \"\"\"Compile a regex pattern with Unicode property support.\"\"\"\n    if not pattern:\n        pattern = \"\"\n    \n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern:\n            raise optparse.OptionValueError(\n                f\"Unicode property escapes like '\\\\p{{...}}' in pattern '{pattern}' \"\n                \"require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _compile_unicode_regex,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _compile_regexp_with_unicode_support(pattern):\n    \"\"\"Compile a regular expression pattern with Unicode property support.\n    \n    Attempts to use the regex module for Unicode properties like \\p{Han}.\n    Falls back to re module with helpful error message if regex is unavailable.\n    \"\"\"\n    if not pattern:\n        pattern = \"\"\n    \n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern:\n            raise optparse.OptionValueError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require \"\n                f\"the 'regex' module. Please install it with: pip install regex\"\n            )\n        # Fall back to standard re module\n        return re.compile(pattern)\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _compile_regexp_with_unicode_support,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _compile_regexp_with_unicode_support(pattern):\n    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n    if not pattern:\n        pattern = \"\"\n    \n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            raise optparse.OptionValueError(\n                f\"Unicode property escapes (\\\\p{{...}}, \\\\P{{...}}) are not supported \"\n                f\"with the standard 're' module. Please install the 'regex' package: \"\n                f\"pip install regex\"\n            )\n        return re.compile(pattern)\n\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": lambda pattern: _compile_regexp_with_unicode_support(pattern),\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _unicode_aware_compile(pattern):\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    if not pattern:\n        pattern = \"\"\n    \n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            raise optparse.OptionValueError(\n                f\"Unicode property escapes (\\\\p{{...}}) in regex pattern '{pattern}' \"\n                \"require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _unicode_aware_compile,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n",
      "\ndef _compile_unicode_regex(pattern):\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    if not pattern:\n        pattern = \"\"\n    \n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if \"\\\\p{\" in pattern:\n            raise optparse.OptionValueError(\n                f\"Unicode property escapes (like \\\\p{{Han}}) are not supported. \"\n                f\"Install the 'regex' module for Unicode property support, \"\n                f\"or use standard regex syntax instead.\"\n            )\n        return re.compile(pattern)\n\n\nVALIDATORS = {\n    \"string\": utils._unquote,\n    \"int\": int,\n    \"float\": float,\n    \"regexp\": _compile_unicode_regex,\n    \"regexp_csv\": _regexp_csv_validator,\n    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n    \"csv\": _csv_validator,\n    \"yn\": _yn_validator,\n    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n    ),\n    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n        opt[\"choices\"], name, value\n"
    ],
    "Location 4 (/root/hy/projects_3/pylint/pylint/config/argument.py lines 103-107)": [
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n                \"Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_unicode_aware_compile(pattern))\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n                \"Install it with: pip install regex\"\n            ) from None\n        return re.compile(pattern)\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_unicode_aware_compile(pattern))\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n                \"Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_unicode_aware_compile(pattern))\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile regex pattern with Unicode property support.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n                \"Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_unicode_aware_compile(pattern))\n    return patterns\n",
      "\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_compile_regex(pattern))\n    return patterns\n",
      "\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_compile_regex(pattern))\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode property escapes\n        if \"\\\\p{\" in pattern or \"\\\\P{\" in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n                \"which require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_unicode_aware_compile(pattern))\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex  # type: ignore[import-untyped]\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if the pattern contains Unicode properties\n        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n                \"Install it with: pip install regex\"\n            ) from None\n        return re.compile(pattern)\n\n\ndef _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_unicode_aware_compile(pattern))\n    return patterns\n"
    ],
    "Location 5 (/root/hy/projects_3/pylint/pylint/config/argument.py lines 112-119)": [
      "\ndef _safe_compile_regex(pattern: str | Pattern[str]) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support fallback.\"\"\"\n    if hasattr(pattern, 'pattern'):\n        # Already compiled\n        return pattern\n    \n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        try:\n            return re.compile(pattern)\n        except re.error as e:\n            if r'\\p{' in pattern:\n                raise re.error(\n                    f\"Unicode property escapes like \\\\p{{}} are not supported by Python's re module. \"\n                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n                ) from e\n            raise\n\n\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(\n            _safe_compile_regex(\n                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                + \"|\"\n                + pathlib.PureWindowsPath(pattern).as_posix()\n            )\n        )\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex  # type: ignore[import]\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n            raise ValueError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) \"\n                \"which require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(\n            _unicode_aware_compile(\n                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                + \"|\"\n                + pathlib.PureWindowsPath(pattern).as_posix()\n            )\n        )\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode property escapes\n        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n            raise argparse.ArgumentTypeError(\n                f\"Unicode property escapes like '\\\\p{{}}' are not supported. \"\n                f\"Install the 'regex' package for Unicode support, or use standard regex syntax.\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(\n            _unicode_aware_compile(\n                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                + \"|\"\n                + pathlib.PureWindowsPath(pattern).as_posix()\n            )\n        )\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n            raise ValueError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}} or \\\\P{{...}}) \"\n                \"which require the 'regex' package. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(\n            _unicode_aware_compile(\n                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                + \"|\"\n                + pathlib.PureWindowsPath(pattern).as_posix()\n            )\n        )\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support.\"\"\"\n    try:\n        import regex  # type: ignore[import]\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if r'\\p{' in pattern or r'\\P{' in pattern:\n            raise ValueError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require \"\n                \"the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(\n            _unicode_aware_compile(\n                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                + \"|\"\n                + pathlib.PureWindowsPath(pattern).as_posix()\n            )\n        )\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex  # type: ignore[import-untyped]\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if \"\\\\p{\" in pattern or \"\\\\P{\" in pattern:\n            raise ValueError(\n                f\"Unicode property escapes like \\\\p{{}} are not supported by Python's re module. \"\n                f\"Install the 'regex' package for Unicode property support: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(\n            _unicode_aware_compile(\n                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                + \"|\"\n                + pathlib.PureWindowsPath(pattern).as_posix()\n            )\n        )\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n            raise ValueError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) \"\n                \"which require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(\n            _unicode_aware_compile(\n                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                + \"|\"\n                + pathlib.PureWindowsPath(pattern).as_posix()\n            )\n        )\n    return patterns\n",
      "\ndef _unicode_aware_compile(pattern: str) -> Pattern[str]:\n    \"\"\"Compile regex pattern with Unicode property support if available.\"\"\"\n    try:\n        import regex\n        return regex.compile(pattern)\n    except ImportError:\n        # Check if pattern contains Unicode properties\n        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n            raise ValueError(\n                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) \"\n                \"which require the 'regex' module. Install it with: pip install regex\"\n            )\n        return re.compile(pattern)\n\n\ndef _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(\n            _unicode_aware_compile(\n                str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                + \"|\"\n                + pathlib.PureWindowsPath(pattern).as_posix()\n            )\n        )\n    return patterns\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..bf132a33b 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,20 +99,23 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_unicode_aware_compile(pattern))\n     return patterns\n \n \n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(\n-            re.compile(\n+            _unicode_aware_compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n@@ -130,7 +133,48 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property escape support.\n+    \n+    Tries to use the 'regex' module which supports Unicode properties like \\p{Han}.\n+    Falls back to standard 're' module with helpful error message if needed.\n+    \"\"\"\n+    if hasattr(pattern, \"pattern\"):\n+        return pattern\n+    \n+    # Check if pattern contains Unicode property escapes\n+    has_unicode_properties = \"\\\\p{\" in str(pattern) or \"\\\\P{\" in str(pattern)\n+    \n+    if has_unicode_properties:\n+        try:\n+            import regex\n+            return regex.compile(pattern)\n+        except ImportError:\n+            raise argparse.ArgumentTypeError(\n+                f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                f\"which require the 'regex' module. Please install it with: pip install regex\"\n+            ) from None\n+    \n+    # Use standard re module for patterns without Unicode properties\n+    return re.compile(pattern)\n+\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..ec5e06214 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -20,10 +20,35 @@ def _csv_validator(_, name, value):\n \n \n # pylint: disable=unused-argument\n+\n+def _unicode_aware_compile_for_validator(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property escape support for validators.\n+    \n+    Tries to use the 'regex' module which supports Unicode properties like \\p{Han}.\n+    Falls back to standard 're' module with helpful error message if needed.\n+    \"\"\"\n+    # Check if pattern contains Unicode property escapes\n+    has_unicode_properties = \"\\\\p{\" in str(pattern) or \"\\\\P{\" in str(pattern)\n+    \n+    if has_unicode_properties:\n+        try:\n+            import regex\n+            return regex.compile(pattern)\n+        except ImportError:\n+            import optparse\n+            raise optparse.OptionValueError(\n+                f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                f\"which require the 'regex' module. Please install it with: pip install regex\"\n+            ) from None\n+    \n+    # Use standard re module for patterns without Unicode properties\n+    return re.compile(pattern)\n+\n+\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    return _unicode_aware_compile_for_validator(value)\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +128,22 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": lambda pattern: _unicode_aware_compile_for_validator(pattern or \"\"),\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_0": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..a05a069d7 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,26 +99,63 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode property escapes\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                \"which require the 'regex' module. Please install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_unicode_aware_compile(pattern))\n     return patterns\n \n \n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            raise ValueError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n+                \"Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(\n-            re.compile(\n+            _unicode_aware_compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n             )\n         )\n     return patterns\n+        )\n+    return patterns\n \n \n _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n@@ -130,7 +167,36 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex  # type: ignore[import-untyped]\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Unicode property escapes (\\\\p{{...}}) in pattern '{pattern}' \"\n+                \"require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..175c20087 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -20,10 +20,23 @@ def _csv_validator(_, name, value):\n \n \n # pylint: disable=unused-argument\n+\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    \n+    # Try to use regex module for Unicode property support, fall back to re\n+    try:\n+        import regex\n+        return regex.compile(value)\n+    except ImportError:\n+        # Check if the pattern contains Unicode properties that re doesn't support\n+        if '\\\\p{' in value:\n+            raise ValueError(\n+                f\"Pattern '{value}' contains Unicode properties (\\\\p{{...}}) which are not supported by Python's re module. \"\n+                \"Please install the 'regex' module for Unicode property support: pip install regex\"\n+            )\n+        return re.compile(value)\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +116,44 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _compile_unicode_regex(pattern):\n+    \"\"\"Compile a regex pattern with Unicode property support.\n+    \n+    Falls back to standard re module if regex module is not available.\n+    \"\"\"\n+    if not pattern:\n+        pattern = \"\"\n+    \n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern:\n+            raise optparse.OptionValueError(\n+                f\"Unicode property escapes like '\\\\p{{}}' are not supported. \"\n+                f\"Install the 'regex' module for Unicode property support, \"\n+                f\"or use standard regex patterns.\"\n+            )\n+        return re.compile(pattern)\n+\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _compile_unicode_regex,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_1": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..e52e559b2 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,27 +99,101 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n+                \"Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_unicode_aware_compile(pattern))\n     return patterns\n \n \n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+\n+def _safe_compile_regex(pattern: str | Pattern[str]) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support fallback.\"\"\"\n+    if hasattr(pattern, 'pattern'):\n+        # Already compiled\n+        return pattern\n+    \n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        try:\n+            return re.compile(pattern)\n+        except re.error as e:\n+            if r'\\p{' in pattern:\n+                raise re.error(\n+                    f\"Unicode property escapes like \\\\p{{}} are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+                ) from e\n+            raise\n+\n+\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(\n-            re.compile(\n+            _safe_compile_regex(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n             )\n         )\n     return patterns\n+        )\n+    return patterns\n+\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n \n+def _unicode_aware_compile(pattern: str | Pattern[str]) -> Pattern[str]:\n+    \"\"\"Compile regex pattern with Unicode property support.\n+    \n+    Attempts to use the regex module for Unicode properties like \\p{Han}.\n+    Falls back to re module with clear error message if regex is unavailable.\n+    \"\"\"\n+    if hasattr(pattern, 'pattern'):  # Already compiled\n+        return pattern\n+    \n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if '\\\\p{' in pattern:\n+            raise ValueError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) \"\n+                \"which require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n \n _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"choice\": str,\n@@ -130,7 +204,12 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..d1c495d4d 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -20,10 +20,23 @@ def _csv_validator(_, name, value):\n \n \n # pylint: disable=unused-argument\n+\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        import regex\n+        return regex.compile(value)\n+    except ImportError:\n+        try:\n+            return re.compile(value)\n+        except re.error as e:\n+            if r'\\p{' in value:\n+                raise re.error(\n+                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+                ) from e\n+            raise\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +116,44 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _compile_unicode_regex(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support.\n+    \n+    First tries to use the 'regex' module which supports Unicode properties like \\p{Han}.\n+    Falls back to standard 're' module if 'regex' is not available.\n+    \"\"\"\n+    if not pattern:\n+        pattern = \"\"\n+    \n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern:\n+            raise optparse.OptionValueError(\n+                f\"Unicode property escapes like '\\\\p{{...}}' in pattern '{pattern}' \"\n+                \"require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _compile_unicode_regex,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_2": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..58885d1ad 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,26 +99,63 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n+                \"Install it with: pip install regex\"\n+            ) from None\n+        return re.compile(pattern)\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_unicode_aware_compile(pattern))\n     return patterns\n \n \n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex  # type: ignore[import]\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n+            raise ValueError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) \"\n+                \"which require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(\n-            re.compile(\n+            _unicode_aware_compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n             )\n         )\n     return patterns\n+        )\n+    return patterns\n \n \n _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n@@ -130,7 +167,36 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile regex pattern with Unicode property support.\"\"\"\n+    try:\n+        import regex  # type: ignore[import]\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            raise ValueError(\n+                f\"Unicode property escapes like \\\\p{{...}} in pattern '{pattern}' \"\n+                \"require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..cf2c004a1 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -20,10 +20,23 @@ def _csv_validator(_, name, value):\n \n \n # pylint: disable=unused-argument\n+\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        import regex\n+        return regex.compile(value)\n+    except ImportError:\n+        try:\n+            return re.compile(value)\n+        except re.error as e:\n+            if r'\\p{' in value:\n+                raise ValueError(\n+                    f\"Unicode property escapes like '\\\\p{{}}' are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+                ) from e\n+            raise\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +116,44 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _compile_regexp_with_unicode_support(pattern):\n+    \"\"\"Compile a regular expression pattern with Unicode property support.\n+    \n+    Attempts to use the regex module for Unicode property support,\n+    falls back to re module with a helpful error message.\n+    \"\"\"\n+    if not pattern:\n+        pattern = \"\"\n+    \n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern:\n+            raise optparse.OptionValueError(\n+                f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                \"which require the 'regex' module. Please install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _compile_regexp_with_unicode_support,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_3": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..b173df881 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,27 +99,88 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n+                \"Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_unicode_aware_compile(pattern))\n     return patterns\n \n \n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode property escapes\n+        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Unicode property escapes like '\\\\p{{}}' are not supported. \"\n+                f\"Install the 'regex' package for Unicode support, or use standard regex syntax.\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(\n-            re.compile(\n+            _unicode_aware_compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n             )\n         )\n     return patterns\n+        )\n+    return patterns\n+\n \n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode property escapes\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Unicode property escapes (\\\\p{{...}}) in pattern '{pattern}' \"\n+                \"require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n \n _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"choice\": str,\n@@ -130,7 +191,12 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..2db4acf18 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -20,10 +20,23 @@ def _csv_validator(_, name, value):\n \n \n # pylint: disable=unused-argument\n+\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        import regex\n+        return regex.compile(value)\n+    except ImportError:\n+        try:\n+            return re.compile(value)\n+        except re.error as e:\n+            if r'\\p{' in value:\n+                raise re.error(\n+                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+                ) from e\n+            raise\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +116,40 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _unicode_aware_compile(pattern):\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    if not pattern:\n+        pattern = \"\"\n+    \n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode property escapes\n+        if r'\\p{' in pattern:\n+            raise optparse.OptionValueError(\n+                f\"Unicode property escapes like '\\\\p{{}}' are not supported. \"\n+                f\"Please install the 'regex' package or use standard regex syntax.\"\n+            ) from None\n+        return re.compile(pattern)\n+\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_4": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..7512d49ab 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,26 +99,63 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile regex pattern with Unicode property support.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n+                \"Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_unicode_aware_compile(pattern))\n     return patterns\n \n \n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n+            raise ValueError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}} or \\\\P{{...}}) \"\n+                \"which require the 'regex' package. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(\n-            re.compile(\n+            _unicode_aware_compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n             )\n         )\n     return patterns\n+        )\n+    return patterns\n \n \n _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n@@ -130,7 +167,36 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n+    try:\n+        import regex  # type: ignore[import]\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Unicode property escapes (like \\\\p{{Han}}) in pattern '{pattern}' \"\n+                \"require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..619bd2697 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -20,10 +20,23 @@ def _csv_validator(_, name, value):\n \n \n # pylint: disable=unused-argument\n+\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        import regex\n+        return regex.compile(value)\n+    except ImportError:\n+        try:\n+            return re.compile(value)\n+        except re.error as e:\n+            if \"\\\\p{\" in value:\n+                raise ValueError(\n+                    f\"Unicode property escapes like '\\\\p{{...}}' are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+                ) from e\n+            raise\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +116,39 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _compile_unicode_regex(pattern):\n+    \"\"\"Compile a regex pattern with Unicode property support.\"\"\"\n+    if not pattern:\n+        pattern = \"\"\n+    \n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern:\n+            raise optparse.OptionValueError(\n+                f\"Unicode property escapes like '\\\\p{{...}}' in pattern '{pattern}' \"\n+                \"require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _compile_unicode_regex,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_5": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..a002be3c0 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,26 +99,48 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_compile_regex(pattern))\n     return patterns\n \n \n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support.\"\"\"\n+    try:\n+        import regex  # type: ignore[import]\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            raise ValueError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require \"\n+                \"the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(\n-            re.compile(\n+            _unicode_aware_compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n             )\n         )\n     return patterns\n+        )\n+    return patterns\n \n \n _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n@@ -130,7 +152,36 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex  # type: ignore[import-untyped]\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if \"\\\\p{\" in pattern:\n+            raise ValueError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) \"\n+                \"which require the 'regex' package. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..8aa574238 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -20,10 +20,23 @@ def _csv_validator(_, name, value):\n \n \n # pylint: disable=unused-argument\n+\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        import regex\n+        return regex.compile(value)\n+    except ImportError:\n+        try:\n+            return re.compile(value)\n+        except re.error as e:\n+            if r'\\p{' in value:\n+                raise ValueError(\n+                    f\"Unicode property escapes like '\\\\p{{}}' are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+                ) from e\n+            raise\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +116,44 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _compile_regexp_with_unicode_support(pattern):\n+    \"\"\"Compile a regular expression pattern with Unicode property support.\n+    \n+    Attempts to use the regex module for Unicode properties like \\p{Han}.\n+    Falls back to re module with helpful error message if regex is unavailable.\n+    \"\"\"\n+    if not pattern:\n+        pattern = \"\"\n+    \n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern:\n+            raise optparse.OptionValueError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require \"\n+                f\"the 'regex' module. Please install it with: pip install regex\"\n+            )\n+        # Fall back to standard re module\n+        return re.compile(pattern)\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _compile_regexp_with_unicode_support,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_6": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..4f65e8c28 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,27 +99,73 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_compile_regex(pattern))\n     return patterns\n \n \n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex  # type: ignore[import-untyped]\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if \"\\\\p{\" in pattern or \"\\\\P{\" in pattern:\n+            raise ValueError(\n+                f\"Unicode property escapes like \\\\p{{}} are not supported by Python's re module. \"\n+                f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(\n-            re.compile(\n+            _unicode_aware_compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n             )\n         )\n     return patterns\n+        )\n+    return patterns\n+\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n \n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern uses Unicode properties\n+        if \"\\\\p{\" in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Pattern '{pattern}' uses Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n+                \"Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n \n _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"choice\": str,\n@@ -130,7 +176,12 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..76518cc92 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -20,10 +20,23 @@ def _csv_validator(_, name, value):\n \n \n # pylint: disable=unused-argument\n+\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        import regex\n+        return regex.compile(value)\n+    except ImportError:\n+        try:\n+            return re.compile(value)\n+        except re.error as e:\n+            if \"\\\\p{\" in value:\n+                raise ValueError(\n+                    f\"Unicode property escapes like \\\\p{{}} are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+                ) from e\n+            raise\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +116,41 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _compile_regexp_with_unicode_support(pattern):\n+    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n+    if not pattern:\n+        pattern = \"\"\n+    \n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            raise optparse.OptionValueError(\n+                f\"Unicode property escapes (\\\\p{{...}}, \\\\P{{...}}) are not supported \"\n+                f\"with the standard 're' module. Please install the 'regex' package: \"\n+                f\"pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": lambda pattern: _compile_regexp_with_unicode_support(pattern),\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_7": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..fd9e528cb 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,26 +99,63 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode property escapes\n+        if \"\\\\p{\" in pattern or \"\\\\P{\" in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Pattern '{pattern}' contains Unicode property escapes (\\\\p{{...}}) \"\n+                \"which require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_unicode_aware_compile(pattern))\n     return patterns\n \n \n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n+            raise ValueError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) \"\n+                \"which require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(\n-            re.compile(\n+            _unicode_aware_compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n             )\n         )\n     return patterns\n+        )\n+    return patterns\n \n \n _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n@@ -130,7 +167,40 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support.\n+    \n+    Attempts to use the 'regex' module which supports Unicode properties like \\p{Han}.\n+    Falls back to 're' module if 'regex' is not available.\n+    \"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern:\n+            raise ValueError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n+                f\"Please install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..68262ea5d 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -20,10 +20,23 @@ def _csv_validator(_, name, value):\n \n \n # pylint: disable=unused-argument\n+\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        import regex\n+        return regex.compile(value)\n+    except ImportError:\n+        try:\n+            return re.compile(value)\n+        except re.error as e:\n+            if r'\\p{' in value:\n+                raise ValueError(\n+                    f\"Unicode property escapes like '\\\\p{{}}' are not supported by Python's re module. \"\n+                    f\"Install the 'regex' package for Unicode property support: pip install regex\"\n+                ) from e\n+            raise\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +116,39 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _unicode_aware_compile(pattern):\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    if not pattern:\n+        pattern = \"\"\n+    \n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if r'\\p{' in pattern or r'\\P{' in pattern:\n+            raise optparse.OptionValueError(\n+                f\"Unicode property escapes (\\\\p{{...}}) in regex pattern '{pattern}' \"\n+                \"require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n",
    "variant_8": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..dc2a33135 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,26 +99,63 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex  # type: ignore[import-untyped]\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if the pattern contains Unicode properties\n+        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n+            raise argparse.ArgumentTypeError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) which require the 'regex' module. \"\n+                \"Install it with: pip install regex\"\n+            ) from None\n+        return re.compile(pattern)\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_unicode_aware_compile(pattern))\n     return patterns\n \n \n+def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile regex pattern with Unicode property support if available.\"\"\"\n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n+            raise ValueError(\n+                f\"Pattern '{pattern}' contains Unicode properties (\\\\p{{...}}) \"\n+                \"which require the 'regex' module. Install it with: pip install regex\"\n+            )\n+        return re.compile(pattern)\n+\n+\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(\n-            re.compile(\n+            _unicode_aware_compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n                 + \"|\"\n                 + pathlib.PureWindowsPath(pattern).as_posix()\n             )\n         )\n     return patterns\n+        )\n+    return patterns\n \n \n _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n@@ -130,7 +167,37 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+\n+def _unicode_aware_compile(pattern: str) -> Pattern[str]:\n+    \"\"\"Compile a regex pattern with Unicode property support when available.\"\"\"\n+    try:\n+        import regex  # type: ignore[import]\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if '\\\\p{' in pattern or '\\\\P{' in pattern:\n+            raise ValueError(\n+                f\"Unicode property escapes (like \\\\p{{Han}}) are not supported by Python's \"\n+                f\"built-in re module. Please install the 'regex' package for Unicode support, \"\n+                f\"or modify your pattern '{pattern}' to use standard regex syntax.\"\n+            )\n+        return re.compile(pattern)\n+\n+_TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n+    \"choice\": str,\n+    \"csv\": _csv_transformer,\n+    \"float\": float,\n+    \"int\": int,\n+    \"confidence\": _confidence_transformer,\n+    \"non_empty_string\": _non_empty_string_transformer,\n+    \"path\": _path_transformer,\n+    \"py_version\": _py_version_transformer,\n+    \"regexp\": _unicode_aware_compile,\n+    \"regexp_csv\": _regexp_csv_transfomer,\n+    \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n+    \"string\": pylint_utils._unquote,\n+    \"yn\": _yn_transformer,\n+}\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\ndiff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..656d8de41 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -20,10 +20,23 @@ def _csv_validator(_, name, value):\n \n \n # pylint: disable=unused-argument\n+\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        import regex\n+        return regex.compile(value)\n+    except ImportError:\n+        try:\n+            return re.compile(value)\n+        except re.error as e:\n+            if r'\\p{' in value:\n+                raise ValueError(\n+                    f\"Unicode property escapes like '\\\\p{{}}' are not supported by Python's re module. \"\n+                    f\"Please install the 'regex' package: pip install regex\"\n+                ) from e\n+            raise\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +116,41 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+\n+def _compile_unicode_regex(pattern):\n+    \"\"\"Compile a regex pattern with Unicode property support if available.\"\"\"\n+    if not pattern:\n+        pattern = \"\"\n+    \n+    try:\n+        import regex\n+        return regex.compile(pattern)\n+    except ImportError:\n+        # Check if pattern contains Unicode properties\n+        if \"\\\\p{\" in pattern:\n+            raise optparse.OptionValueError(\n+                f\"Unicode property escapes (like \\\\p{{Han}}) are not supported. \"\n+                f\"Install the 'regex' module for Unicode property support, \"\n+                f\"or use standard regex syntax instead.\"\n+            )\n+        return re.compile(pattern)\n+\n+\n+VALIDATORS = {\n+    \"string\": utils._unquote,\n+    \"int\": int,\n+    \"float\": float,\n+    \"regexp\": _compile_unicode_regex,\n+    \"regexp_csv\": _regexp_csv_validator,\n+    \"regexp_paths_csv\": _regexp_paths_csv_validator,\n+    \"csv\": _csv_validator,\n+    \"yn\": _yn_validator,\n+    \"choice\": lambda opt, name, value: _choice_validator(opt[\"choices\"], name, value),\n+    \"confidence\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n+    ),\n+    \"multiple_choice\": lambda opt, name, value: _multiple_choice_validator(\n+        opt[\"choices\"], name, value\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n"
  }
}