{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/pytest/src/_pytest/_io/saferepr.py lines 22-24)": "\ndef _format_repr_exception(exc: BaseException, obj: Any) -> str:\n    try:\n        exc_info = _try_repr_or_str(exc)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException as exc:\n        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n    \n    # Safe access to class name to prevent infinite recursion\n    try:\n        class_name = obj.__class__.__name__\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException:\n        class_name = \"unpresentable\"\n    \n    return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n        exc_info, class_name, id(obj)\n    )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/pytest/src/_pytest/_io/saferepr.py lines 22-24)": [
      "\ndef _format_repr_exception(exc: BaseException, obj: Any) -> str:\n    try:\n        exc_info = _try_repr_or_str(exc)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException as exc:\n        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n    \n    # Safe access to class name to prevent infinite recursion\n    try:\n        class_name = obj.__class__.__name__\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException:\n        class_name = \"unpresentable\"\n    \n    return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n        exc_info, class_name, id(obj)\n    )\n",
      "\ndef _format_repr_exception(exc: BaseException, obj: Any) -> str:\n    try:\n        exc_info = _try_repr_or_str(exc)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException as exc:\n        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n    \n    # Safe access to class name to prevent infinite recursion\n    try:\n        class_name = obj.__class__.__name__\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException:\n        class_name = \"unpresentable\"\n    \n    return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n        exc_info, class_name, id(obj)\n    )\n",
      "\ndef _format_repr_exception(exc: BaseException, obj: Any) -> str:\n    try:\n        exc_info = _try_repr_or_str(exc)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException as exc:\n        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n    \n    # Safe access to class name to prevent infinite recursion\n    try:\n        class_name = obj.__class__.__name__\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException:\n        class_name = \"unpresentable\"\n    \n    return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n        exc_info, class_name, id(obj)\n    )\n",
      "\ndef _format_repr_exception(exc: BaseException, obj: Any) -> str:\n    try:\n        exc_info = _try_repr_or_str(exc)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException as exc:\n        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n    \n    # Safe access to class name to prevent infinite recursion\n    try:\n        class_name = obj.__class__.__name__\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException:\n        class_name = \"unpresentable\"\n    \n    return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n        exc_info, class_name, id(obj)\n    )\n",
      "\ndef _format_repr_exception(exc: BaseException, obj: Any) -> str:\n    try:\n        exc_info = _try_repr_or_str(exc)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException as exc:\n        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n    \n    # Safe access to class name to prevent infinite recursion\n    try:\n        class_name = obj.__class__.__name__\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException:\n        class_name = \"unpresentable\"\n    \n    return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n        exc_info, class_name, id(obj)\n    )\n",
      "\ndef _format_repr_exception(exc: BaseException, obj: Any) -> str:\n    try:\n        exc_info = _try_repr_or_str(exc)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException as exc:\n        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n    \n    # Safe access to class name to prevent infinite recursion\n    try:\n        class_name = obj.__class__.__name__\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException:\n        class_name = \"unpresentable\"\n    \n    return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n        exc_info, class_name, id(obj)\n    )\n",
      "\ndef _format_repr_exception(exc: BaseException, obj: Any) -> str:\n    try:\n        exc_info = _try_repr_or_str(exc)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException as exc:\n        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n    \n    # Safe access to class name to prevent infinite recursion\n    try:\n        class_name = obj.__class__.__name__\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException:\n        class_name = \"unpresentable\"\n    \n    return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n        exc_info, class_name, id(obj)\n    )\n",
      "\ndef _format_repr_exception(exc: BaseException, obj: Any) -> str:\n    try:\n        exc_info = _try_repr_or_str(exc)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException as exc:\n        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n    \n    # Safe access to class name to prevent infinite recursion\n    try:\n        class_name = obj.__class__.__name__\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException:\n        class_name = \"unpresentable\"\n    \n    return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n        exc_info, class_name, id(obj)\n    )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..1db26a199 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,17 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+\n+    # Safe access to class name to prevent infinite recursion\n+    try:\n+        class_name = obj.__class__.__name__\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException:\n+        class_name = \"unpresentable\"\n+    \n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n",
    "variant_0": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..7a8a9ec7d 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,25 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+\n+def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n+    try:\n+        exc_info = _try_repr_or_str(exc)\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException as exc:\n+        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    \n+    # Safe access to class name to prevent infinite recursion\n+    try:\n+        class_name = obj.__class__.__name__\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException:\n+        class_name = \"unpresentable\"\n+    \n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n",
    "variant_1": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..7a8a9ec7d 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,25 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+\n+def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n+    try:\n+        exc_info = _try_repr_or_str(exc)\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException as exc:\n+        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    \n+    # Safe access to class name to prevent infinite recursion\n+    try:\n+        class_name = obj.__class__.__name__\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException:\n+        class_name = \"unpresentable\"\n+    \n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n",
    "variant_2": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..7a8a9ec7d 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,25 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+\n+def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n+    try:\n+        exc_info = _try_repr_or_str(exc)\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException as exc:\n+        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    \n+    # Safe access to class name to prevent infinite recursion\n+    try:\n+        class_name = obj.__class__.__name__\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException:\n+        class_name = \"unpresentable\"\n+    \n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n",
    "variant_3": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..7a8a9ec7d 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,25 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+\n+def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n+    try:\n+        exc_info = _try_repr_or_str(exc)\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException as exc:\n+        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    \n+    # Safe access to class name to prevent infinite recursion\n+    try:\n+        class_name = obj.__class__.__name__\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException:\n+        class_name = \"unpresentable\"\n+    \n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n",
    "variant_4": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..7a8a9ec7d 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,25 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+\n+def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n+    try:\n+        exc_info = _try_repr_or_str(exc)\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException as exc:\n+        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    \n+    # Safe access to class name to prevent infinite recursion\n+    try:\n+        class_name = obj.__class__.__name__\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException:\n+        class_name = \"unpresentable\"\n+    \n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n",
    "variant_5": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..7a8a9ec7d 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,25 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+\n+def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n+    try:\n+        exc_info = _try_repr_or_str(exc)\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException as exc:\n+        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    \n+    # Safe access to class name to prevent infinite recursion\n+    try:\n+        class_name = obj.__class__.__name__\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException:\n+        class_name = \"unpresentable\"\n+    \n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n",
    "variant_6": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..7a8a9ec7d 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,25 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+\n+def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n+    try:\n+        exc_info = _try_repr_or_str(exc)\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException as exc:\n+        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    \n+    # Safe access to class name to prevent infinite recursion\n+    try:\n+        class_name = obj.__class__.__name__\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException:\n+        class_name = \"unpresentable\"\n+    \n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n",
    "variant_7": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..7a8a9ec7d 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,25 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+\n+def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n+    try:\n+        exc_info = _try_repr_or_str(exc)\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException as exc:\n+        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    \n+    # Safe access to class name to prevent infinite recursion\n+    try:\n+        class_name = obj.__class__.__name__\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException:\n+        class_name = \"unpresentable\"\n+    \n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n",
    "variant_8": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..7a8a9ec7d 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,25 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+\n+def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n+    try:\n+        exc_info = _try_repr_or_str(exc)\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException as exc:\n+        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    \n+    # Safe access to class name to prevent infinite recursion\n+    try:\n+        class_name = obj.__class__.__name__\n+    except (KeyboardInterrupt, SystemExit):\n+        raise\n+    except BaseException:\n+        class_name = \"unpresentable\"\n+    \n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n"
  }
}