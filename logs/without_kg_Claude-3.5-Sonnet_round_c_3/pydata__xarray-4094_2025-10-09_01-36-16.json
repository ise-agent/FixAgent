{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/xarray/xarray/core/dataarray.py lines 1961-1967)": "\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
    "Location 2 (/root/hy/projects_3/xarray/xarray/core/dataarray.py lines 1957-1960)": "\n        level_number = idx._get_level_number(level)\n        variables = idx.levels[level_number]\n        variable_dim = idx.names[level_number]\n\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            # Only squeeze the variable dimension, preserve sample dimensions\n            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
    "Location 3 (/root/hy/projects_3/xarray/xarray/core/dataarray.py lines 1953-1956)": "\n        idx = self.indexes[dim]\n        if not isinstance(idx, pd.MultiIndex):\n            raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n",
    "Location 4 (/root/hy/projects_3/xarray/xarray/core/dataarray.py lines 1914-1916)": "\n        label : int, default 0\n            Label of the level to expand dataset along. Overrides the level\n            argument if given.\n",
    "Location 5 (/root/hy/projects_3/xarray/xarray/core/dataset.py lines 3449-3452)": "\n                raise ValueError(\n                    \"All variables in the dataset must contain the \"\n                    \"dimensions {}.\".format(sample_dims)\n                )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/xarray/xarray/core/dataarray.py lines 1961-1967)": [
      "\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            selected = self.sel({variable_dim: k})\n            # Only squeeze the variable dimension, preserve other coordinates\n            if variable_dim in selected.dims:\n                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n            else:\n                data_dict[k] = selected\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            # Only squeeze the variable dimension, preserve other coordinates\n            selected = self.sel({variable_dim: k})\n            if variable_dim in selected.dims:\n                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n            else:\n                data_dict[k] = selected\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            # Only squeeze the variable dimension, preserve other coordinates\n            selected = self.sel({variable_dim: k})\n            if variable_dim in selected.dims:\n                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n            else:\n                data_dict[k] = selected\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            # Only squeeze the variable dimension, preserve other coordinates\n            selected = self.sel({variable_dim: k})\n            if variable_dim in selected.dims:\n                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n            else:\n                data_dict[k] = selected\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n\n        # unstacked dataset\n        return Dataset(data_dict)\n"
    ],
    "Location 2 (/root/hy/projects_3/xarray/xarray/core/dataarray.py lines 1957-1960)": [
      "\n        level_number = idx._get_level_number(level)\n        variables = idx.levels[level_number]\n        variable_dim = idx.names[level_number]\n\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            # Only squeeze the variable dimension, preserve other coordinates\n            selected = self.sel({variable_dim: k})\n            if variable_dim in selected.dims:\n                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n            else:\n                data_dict[k] = selected\n",
      "\n        level_number = idx._get_level_number(level)\n        variables = idx.levels[level_number]\n        variable_dim = idx.names[level_number]\n\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            # Only squeeze the variable dimension, preserve other coordinates\n            selected = self.sel({variable_dim: k})\n            if variable_dim in selected.dims:\n                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n            else:\n                data_dict[k] = selected\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            selected = self.sel({variable_dim: k})\n            # Only squeeze the variable dimension, not all dimensions\n            if variable_dim in selected.dims:\n                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n            else:\n                data_dict[k] = selected\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        level_number = idx._get_level_number(level)\n        variables = idx.levels[level_number]\n        variable_dim = idx.names[level_number]\n\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            # Only squeeze the variable dimension, preserve other coordinates\n            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        level_number = idx._get_level_number(level)\n        variables = idx.levels[level_number]\n        variable_dim = idx.names[level_number]\n\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            # Only squeeze the variable dimension, preserve other coordinates\n            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n",
      "\n        level_number = idx._get_level_number(level)\n        variables = idx.levels[level_number]\n        variable_dim = idx.names[level_number]\n\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            # Only squeeze the variable dimension, preserve other coordinates\n            selected = self.sel({variable_dim: k})\n            if variable_dim in selected.dims:\n                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n            else:\n                data_dict[k] = selected\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        level_number = idx._get_level_number(level)\n        variables = idx.levels[level_number]\n        variable_dim = idx.names[level_number]\n\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            # Only squeeze the variable dimension, preserve other coordinates\n            selected = self.sel({variable_dim: k})\n            if variable_dim in selected.dims:\n                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n            else:\n                data_dict[k] = selected\n\n        # unstacked dataset\n        return Dataset(data_dict)\n",
      "\n        level_number = idx._get_level_number(level)\n        variables = idx.levels[level_number]\n        variable_dim = idx.names[level_number]\n\n        # pull variables out of datarray\n        data_dict = {}\n        for k in variables:\n            # Only squeeze the variable dimension, preserve sample dimensions\n            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n\n        # unstacked dataset\n        return Dataset(data_dict)\n"
    ],
    "Location 3 (/root/hy/projects_3/xarray/xarray/core/dataarray.py lines 1953-1956)": [
      "\n        idx = self.indexes[dim]\n        if not isinstance(idx, pd.MultiIndex):\n            raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n",
      "\n        idx = self.indexes[dim]\n        if not isinstance(idx, pd.MultiIndex):\n            raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n",
      "\n        idx = self.indexes[dim]\n        if not isinstance(idx, pd.MultiIndex):\n            raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n",
      "\n        idx = self.indexes[dim]\n        if not isinstance(idx, pd.MultiIndex):\n            raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n",
      "\n        idx = self.indexes[dim]\n        if not isinstance(idx, pd.MultiIndex):\n            raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n",
      "\n        idx = self.indexes[dim]\n        if not isinstance(idx, pd.MultiIndex):\n            raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n",
      "\n        idx = self.indexes[dim]\n        if not isinstance(idx, pd.MultiIndex):\n            raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n",
      "\n        idx = self.indexes[dim]\n        if not isinstance(idx, pd.MultiIndex):\n            raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n"
    ],
    "Location 4 (/root/hy/projects_3/xarray/xarray/core/dataarray.py lines 1914-1916)": [
      "\n        label : int, default 0\n            Label of the level to expand dataset along. Overrides the level\n            argument if given.\n",
      "\n        label : int, default None\n            Label of the level to expand dataset along. Only used when level\n            is specified as an integer index.\n",
      "\n        label : int, default 0\n            Label of the level to expand dataset along. Overrides the level\n            argument if given.\n",
      "\n        label : int, default 0\n            Label of the level to expand dataset along. Overrides the level\n            argument if given.\n",
      "\n        label : int, default 0\n            Label of the level to expand dataset along. Overrides the level\n            argument if given.\n",
      "\n        label : int, default 0\n            Label of the level to expand dataset along. Overrides the level\n            argument if given.\n",
      "\n        label : int, default 0\n            Label of the level to expand dataset along. Overrides the level\n            argument if given.\n",
      "\n        label : int, default 0\n            Label of the level to expand dataset along. Overrides the level\n            argument if given.\n"
    ],
    "Location 5 (/root/hy/projects_3/xarray/xarray/core/dataset.py lines 3449-3452)": [
      "\n                raise ValueError(\n                    \"All variables in the dataset must contain the \"\n                    \"dimensions {}.\".format(sample_dims)\n                )\n",
      "\n                raise ValueError(\n                    \"All variables in the dataset must contain the \"\n                    \"dimensions {}.\".format(sample_dims)\n                )\n",
      "\n                raise ValueError(\n                    \"All variables in the dataset must contain the \"\n                    \"dimensions {}.\".format(sample_dims)\n                )\n",
      "\n                raise ValueError(\n                    \"All variables in the dataset must contain the \"\n                    \"dimensions {}.\".format(sample_dims)\n                )\n",
      "\n                raise ValueError(\n                    \"All variables in the dataset must contain the \"\n                    \"dimensions {}.\".format(sample_dims)\n                )\n",
      "\n                raise ValueError(\n                    \"All variables in the dataset must contain the \"\n                    \"dimensions {}.\".format(sample_dims)\n                )\n",
      "\n                raise ValueError(\n                    \"All variables in the dataset must contain the \"\n                    \"dimensions {}.\".format(sample_dims)\n                )\n",
      "\n                raise ValueError(\n                    \"All variables in the dataset must contain the \"\n                    \"dimensions {}.\".format(sample_dims)\n                )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..64bdf9c7 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1911,9 +1911,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         level : int or str\n             The MultiIndex level to expand to a dataset along. Can either be\n             the integer index of the level or its name.\n-        label : int, default 0\n-            Label of the level to expand dataset along. Overrides the label\n-            argument if given.\n+\n \n         Returns\n         -------\n@@ -1950,6 +1948,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         Dataset.to_stacked_array\n         \"\"\"\n \n+\n         idx = self.indexes[dim]\n         if not isinstance(idx, pd.MultiIndex):\n             raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n@@ -1961,7 +1960,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n \n         # unstacked dataset\n         return Dataset(data_dict)\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..1c4c0473 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3446,9 +3446,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dims = self[variable].dims\n             dims_include_sample_dims = set(sample_dims) <= set(dims)\n             if not dims_include_sample_dims:\n+\n                 raise ValueError(\n                     \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n+                    \"dimensions {}.\".format(sample_dims)\n                 )\n \n         def ensure_stackable(val):\n",
    "variant_0": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..6d6985f3 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1911,8 +1911,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         level : int or str\n             The MultiIndex level to expand to a dataset along. Can either be\n             the integer index of the level or its name.\n+\n         label : int, default 0\n-            Label of the level to expand dataset along. Overrides the label\n+            Label of the level to expand dataset along. Overrides the level\n             argument if given.\n \n         Returns\n@@ -1950,6 +1951,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         Dataset.to_stacked_array\n         \"\"\"\n \n+\n         idx = self.indexes[dim]\n         if not isinstance(idx, pd.MultiIndex):\n             raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n@@ -1961,7 +1963,16 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Only squeeze the variable dimension, preserve sample dimensions\n+            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n+\n+        # unstacked dataset\n+        return Dataset(data_dict)\n+\n+        # pull variables out of datarray\n+        data_dict = {}\n+        for k in variables:\n+            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n \n         # unstacked dataset\n         return Dataset(data_dict)\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..1c4c0473 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3446,9 +3446,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dims = self[variable].dims\n             dims_include_sample_dims = set(sample_dims) <= set(dims)\n             if not dims_include_sample_dims:\n+\n                 raise ValueError(\n                     \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n+                    \"dimensions {}.\".format(sample_dims)\n                 )\n \n         def ensure_stackable(val):\n",
    "variant_1": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..df641753 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1911,8 +1911,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         level : int or str\n             The MultiIndex level to expand to a dataset along. Can either be\n             the integer index of the level or its name.\n+\n         label : int, default 0\n-            Label of the level to expand dataset along. Overrides the label\n+            Label of the level to expand dataset along. Overrides the level\n             argument if given.\n \n         Returns\n@@ -1950,6 +1951,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         Dataset.to_stacked_array\n         \"\"\"\n \n+\n         idx = self.indexes[dim]\n         if not isinstance(idx, pd.MultiIndex):\n             raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n@@ -1961,7 +1963,22 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Only squeeze the variable dimension, preserve other coordinates\n+            selected = self.sel({variable_dim: k})\n+            if variable_dim in selected.dims:\n+                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n+            else:\n+                data_dict[k] = selected\n+\n+        # pull variables out of datarray\n+        data_dict = {}\n+        for k in variables:\n+            selected = self.sel({variable_dim: k})\n+            # Only squeeze the variable dimension, preserve other coordinates\n+            if variable_dim in selected.dims:\n+                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n+            else:\n+                data_dict[k] = selected\n \n         # unstacked dataset\n         return Dataset(data_dict)\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..1c4c0473 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3446,9 +3446,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dims = self[variable].dims\n             dims_include_sample_dims = set(sample_dims) <= set(dims)\n             if not dims_include_sample_dims:\n+\n                 raise ValueError(\n                     \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n+                    \"dimensions {}.\".format(sample_dims)\n                 )\n \n         def ensure_stackable(val):\n",
    "variant_2": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..5c3d95eb 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1911,9 +1911,10 @@ class DataArray(AbstractArray, DataWithCoords):\n         level : int or str\n             The MultiIndex level to expand to a dataset along. Can either be\n             the integer index of the level or its name.\n-        label : int, default 0\n-            Label of the level to expand dataset along. Overrides the label\n-            argument if given.\n+\n+        label : int, default None\n+            Label of the level to expand dataset along. Only used when level\n+            is specified as an integer index.\n \n         Returns\n         -------\n@@ -1950,6 +1951,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         Dataset.to_stacked_array\n         \"\"\"\n \n+\n         idx = self.indexes[dim]\n         if not isinstance(idx, pd.MultiIndex):\n             raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n@@ -1961,7 +1963,25 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Only squeeze the variable dimension, preserve other coordinates\n+            selected = self.sel({variable_dim: k})\n+            if variable_dim in selected.dims:\n+                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n+            else:\n+                data_dict[k] = selected\n+\n+        # unstacked dataset\n+        return Dataset(data_dict)\n+\n+        # pull variables out of datarray\n+        data_dict = {}\n+        for k in variables:\n+            # Only squeeze the variable dimension, preserve other coordinates\n+            selected = self.sel({variable_dim: k})\n+            if variable_dim in selected.dims:\n+                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n+            else:\n+                data_dict[k] = selected\n \n         # unstacked dataset\n         return Dataset(data_dict)\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..1c4c0473 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3446,9 +3446,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dims = self[variable].dims\n             dims_include_sample_dims = set(sample_dims) <= set(dims)\n             if not dims_include_sample_dims:\n+\n                 raise ValueError(\n                     \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n+                    \"dimensions {}.\".format(sample_dims)\n                 )\n \n         def ensure_stackable(val):\n",
    "variant_3": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..4a7c046c 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1911,8 +1911,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         level : int or str\n             The MultiIndex level to expand to a dataset along. Can either be\n             the integer index of the level or its name.\n+\n         label : int, default 0\n-            Label of the level to expand dataset along. Overrides the label\n+            Label of the level to expand dataset along. Overrides the level\n             argument if given.\n \n         Returns\n@@ -1950,18 +1951,33 @@ class DataArray(AbstractArray, DataWithCoords):\n         Dataset.to_stacked_array\n         \"\"\"\n \n+\n         idx = self.indexes[dim]\n         if not isinstance(idx, pd.MultiIndex):\n             raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n \n-        level_number = idx._get_level_number(level)\n-        variables = idx.levels[level_number]\n-        variable_dim = idx.names[level_number]\n+        # pull variables out of datarray\n+        data_dict = {}\n+        for k in variables:\n+            selected = self.sel({variable_dim: k})\n+            # Only squeeze the variable dimension, not all dimensions\n+            if variable_dim in selected.dims:\n+                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n+            else:\n+                data_dict[k] = selected\n+\n+        # unstacked dataset\n+        return Dataset(data_dict)\n \n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Only squeeze the variable dimension, preserve other coordinates\n+            selected = self.sel({variable_dim: k})\n+            if variable_dim in selected.dims:\n+                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n+            else:\n+                data_dict[k] = selected\n \n         # unstacked dataset\n         return Dataset(data_dict)\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..1c4c0473 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3446,9 +3446,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dims = self[variable].dims\n             dims_include_sample_dims = set(sample_dims) <= set(dims)\n             if not dims_include_sample_dims:\n+\n                 raise ValueError(\n                     \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n+                    \"dimensions {}.\".format(sample_dims)\n                 )\n \n         def ensure_stackable(val):\n",
    "variant_4": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..f401cd6b 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1911,8 +1911,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         level : int or str\n             The MultiIndex level to expand to a dataset along. Can either be\n             the integer index of the level or its name.\n+\n         label : int, default 0\n-            Label of the level to expand dataset along. Overrides the label\n+            Label of the level to expand dataset along. Overrides the level\n             argument if given.\n \n         Returns\n@@ -1950,6 +1951,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         Dataset.to_stacked_array\n         \"\"\"\n \n+\n         idx = self.indexes[dim]\n         if not isinstance(idx, pd.MultiIndex):\n             raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n@@ -1961,7 +1963,16 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Only squeeze the variable dimension, preserve other coordinates\n+            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n+\n+        # unstacked dataset\n+        return Dataset(data_dict)\n+\n+        # pull variables out of datarray\n+        data_dict = {}\n+        for k in variables:\n+            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n \n         # unstacked dataset\n         return Dataset(data_dict)\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..1c4c0473 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3446,9 +3446,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dims = self[variable].dims\n             dims_include_sample_dims = set(sample_dims) <= set(dims)\n             if not dims_include_sample_dims:\n+\n                 raise ValueError(\n                     \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n+                    \"dimensions {}.\".format(sample_dims)\n                 )\n \n         def ensure_stackable(val):\n",
    "variant_5": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..76239941 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1911,8 +1911,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         level : int or str\n             The MultiIndex level to expand to a dataset along. Can either be\n             the integer index of the level or its name.\n+\n         label : int, default 0\n-            Label of the level to expand dataset along. Overrides the label\n+            Label of the level to expand dataset along. Overrides the level\n             argument if given.\n \n         Returns\n@@ -1950,6 +1951,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         Dataset.to_stacked_array\n         \"\"\"\n \n+\n         idx = self.indexes[dim]\n         if not isinstance(idx, pd.MultiIndex):\n             raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n@@ -1961,7 +1963,13 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Only squeeze the variable dimension, preserve other coordinates\n+            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n+\n+        # pull variables out of datarray\n+        data_dict = {}\n+        for k in variables:\n+            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n \n         # unstacked dataset\n         return Dataset(data_dict)\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..1c4c0473 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3446,9 +3446,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dims = self[variable].dims\n             dims_include_sample_dims = set(sample_dims) <= set(dims)\n             if not dims_include_sample_dims:\n+\n                 raise ValueError(\n                     \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n+                    \"dimensions {}.\".format(sample_dims)\n                 )\n \n         def ensure_stackable(val):\n",
    "variant_6": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..e26fc9b5 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1911,8 +1911,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         level : int or str\n             The MultiIndex level to expand to a dataset along. Can either be\n             the integer index of the level or its name.\n+\n         label : int, default 0\n-            Label of the level to expand dataset along. Overrides the label\n+            Label of the level to expand dataset along. Overrides the level\n             argument if given.\n \n         Returns\n@@ -1950,6 +1951,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         Dataset.to_stacked_array\n         \"\"\"\n \n+\n         idx = self.indexes[dim]\n         if not isinstance(idx, pd.MultiIndex):\n             raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n@@ -1961,7 +1963,25 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Only squeeze the variable dimension, preserve other coordinates\n+            selected = self.sel({variable_dim: k})\n+            if variable_dim in selected.dims:\n+                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n+            else:\n+                data_dict[k] = selected\n+\n+        # unstacked dataset\n+        return Dataset(data_dict)\n+\n+        # pull variables out of datarray\n+        data_dict = {}\n+        for k in variables:\n+            # Only squeeze the variable dimension, preserve other coordinates\n+            selected = self.sel({variable_dim: k})\n+            if variable_dim in selected.dims:\n+                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n+            else:\n+                data_dict[k] = selected\n \n         # unstacked dataset\n         return Dataset(data_dict)\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..1c4c0473 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3446,9 +3446,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dims = self[variable].dims\n             dims_include_sample_dims = set(sample_dims) <= set(dims)\n             if not dims_include_sample_dims:\n+\n                 raise ValueError(\n                     \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n+                    \"dimensions {}.\".format(sample_dims)\n                 )\n \n         def ensure_stackable(val):\n",
    "variant_7": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..0862890d 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1911,8 +1911,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         level : int or str\n             The MultiIndex level to expand to a dataset along. Can either be\n             the integer index of the level or its name.\n+\n         label : int, default 0\n-            Label of the level to expand dataset along. Overrides the label\n+            Label of the level to expand dataset along. Overrides the level\n             argument if given.\n \n         Returns\n@@ -1950,6 +1951,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         Dataset.to_stacked_array\n         \"\"\"\n \n+\n         idx = self.indexes[dim]\n         if not isinstance(idx, pd.MultiIndex):\n             raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n@@ -1961,7 +1963,20 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Only squeeze the variable dimension, preserve other coordinates\n+            selected = self.sel({variable_dim: k})\n+            if variable_dim in selected.dims:\n+                data_dict[k] = selected.squeeze(variable_dim, drop=True)\n+            else:\n+                data_dict[k] = selected\n+\n+        # unstacked dataset\n+        return Dataset(data_dict)\n+\n+        # pull variables out of datarray\n+        data_dict = {}\n+        for k in variables:\n+            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n \n         # unstacked dataset\n         return Dataset(data_dict)\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..1c4c0473 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3446,9 +3446,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dims = self[variable].dims\n             dims_include_sample_dims = set(sample_dims) <= set(dims)\n             if not dims_include_sample_dims:\n+\n                 raise ValueError(\n                     \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n+                    \"dimensions {}.\".format(sample_dims)\n                 )\n \n         def ensure_stackable(val):\n",
    "variant_8": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..6d6985f3 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1911,8 +1911,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         level : int or str\n             The MultiIndex level to expand to a dataset along. Can either be\n             the integer index of the level or its name.\n+\n         label : int, default 0\n-            Label of the level to expand dataset along. Overrides the label\n+            Label of the level to expand dataset along. Overrides the level\n             argument if given.\n \n         Returns\n@@ -1950,6 +1951,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         Dataset.to_stacked_array\n         \"\"\"\n \n+\n         idx = self.indexes[dim]\n         if not isinstance(idx, pd.MultiIndex):\n             raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n@@ -1961,7 +1963,16 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Only squeeze the variable dimension, preserve sample dimensions\n+            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n+\n+        # unstacked dataset\n+        return Dataset(data_dict)\n+\n+        # pull variables out of datarray\n+        data_dict = {}\n+        for k in variables:\n+            data_dict[k] = self.sel({variable_dim: k}).squeeze(variable_dim, drop=True)\n \n         # unstacked dataset\n         return Dataset(data_dict)\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..1c4c0473 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3446,9 +3446,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dims = self[variable].dims\n             dims_include_sample_dims = set(sample_dims) <= set(dims)\n             if not dims_include_sample_dims:\n+\n                 raise ValueError(\n                     \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n+                    \"dimensions {}.\".format(sample_dims)\n                 )\n \n         def ensure_stackable(val):\n"
  }
}