{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/core/checks/model_checks.py lines 7-8)": "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
    "Location 2 (/root/hy/projects_3/django/django/core/checks/model_checks.py lines 12-12)": "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
    "Location 3 (/root/hy/projects_3/django/django/core/checks/model_checks.py lines 22-22)": "\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
    "Location 4 (/root/hy/projects_3/django/django/core/checks/model_checks.py lines 38-47)": "\n    for (db_alias, db_table), model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n                    % (db_table, db_alias, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/core/checks/model_checks.py lines 7-8)": [
      "\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n",
      "\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n"
    ],
    "Location 2 (/root/hy/projects_3/django/django/core/checks/model_checks.py lines 12-12)": [
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\nimport inspect\nimport types\nfrom collections import defaultdict\nfrom itertools import chain\n\nfrom django.apps import apps\nfrom django.core.checks import Error, Tags, register\nfrom django.db import router\n\n\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n"
    ],
    "Location 3 (/root/hy/projects_3/django/django/core/checks/model_checks.py lines 22-22)": [
      "\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n",
      "\n            db_alias = router.db_for_write(model)\n            key = (db_alias, model._meta.db_table)\n            db_table_models[key].append(model._meta.label)\n"
    ],
    "Location 4 (/root/hy/projects_3/django/django/core/checks/model_checks.py lines 38-47)": [
      "\n    for (db_alias, db_table), model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n                    % (db_table, db_alias, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n",
      "\n    for (db_alias, db_table), model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n                    % (db_table, db_alias, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n",
      "\n    for (db_alias, db_table), model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n                    % (db_table, db_alias, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n",
      "\n    for (db_alias, db_table), model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n                    % (db_table, db_alias, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n",
      "\n    for (db_alias, db_table), model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n                    % (db_table, db_alias, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n",
      "\n    for (db_alias, db_table), model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n                    % (db_table, db_alias, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n",
      "\n    for (db_alias, db_table), model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n                    % (db_table, db_alias, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n",
      "\n    for (db_alias, db_table), model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            errors.append(\n                Error(\n                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n                    % (db_table, db_alias, ', '.join(model_labels)),\n                    obj=db_table,\n                    id='models.E028',\n                )\n            )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..16e0aa0601 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -4,11 +4,13 @@ from collections import defaultdict\n from itertools import chain\n \n from django.apps import apps\n-from django.core.checks import Error, Tags, register\n \n+from django.core.checks import Error, Tags, register\n+from django.db import router\n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n+\n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n@@ -19,7 +21,10 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +40,13 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    for (db_alias, db_table), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                    % (db_table, db_alias, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_0": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..d164e3fd22 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,8 +3,28 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+from django.apps import apps\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n+from django.apps import apps\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n@@ -19,7 +39,22 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +70,13 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    for (db_alias, db_table), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                    % (db_table, db_alias, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_1": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..fc813f7b72 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,8 +3,22 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+from django.apps import apps\n+\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n@@ -19,7 +33,22 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +64,13 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    for (db_alias, db_table), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                    % (db_table, db_alias, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_2": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..fc813f7b72 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,8 +3,22 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+from django.apps import apps\n+\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n@@ -19,7 +33,22 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +64,13 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    for (db_alias, db_table), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                    % (db_table, db_alias, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_3": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..fc813f7b72 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,8 +3,22 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+from django.apps import apps\n+\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n@@ -19,7 +33,22 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +64,13 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    for (db_alias, db_table), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                    % (db_table, db_alias, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_4": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..fc813f7b72 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,8 +3,22 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+from django.apps import apps\n+\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n@@ -19,7 +33,22 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +64,13 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    for (db_alias, db_table), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                    % (db_table, db_alias, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_5": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..fc813f7b72 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,8 +3,22 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+from django.apps import apps\n+\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n@@ -19,7 +33,22 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +64,13 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    for (db_alias, db_table), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                    % (db_table, db_alias, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_6": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..fc813f7b72 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,8 +3,22 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+from django.apps import apps\n+\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n@@ -19,7 +33,22 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +64,13 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    for (db_alias, db_table), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                    % (db_table, db_alias, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_7": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..fc813f7b72 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,8 +3,22 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+from django.apps import apps\n+\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n@@ -19,7 +33,22 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +64,13 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    for (db_alias, db_table), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                    % (db_table, db_alias, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n",
    "variant_8": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..fc813f7b72 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,8 +3,22 @@ import types\n from collections import defaultdict\n from itertools import chain\n \n+from django.apps import apps\n+\n+from django.core.checks import Error, Tags, register\n+from django.db import router\n+\n+@register(Tags.models)\n+def check_all_models(app_configs=None, **kwargs):\n+\n+import inspect\n+import types\n+from collections import defaultdict\n+from itertools import chain\n+\n from django.apps import apps\n from django.core.checks import Error, Tags, register\n+from django.db import router\n \n \n @register(Tags.models)\n@@ -19,7 +33,22 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n+    indexes = defaultdict(list)\n+    constraints = defaultdict(list)\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+\n+            db_alias = router.db_for_write(model)\n+            key = (db_alias, model._meta.db_table)\n+            db_table_models[key].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +64,13 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+\n+    for (db_alias, db_table), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                    % (db_table, db_alias, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n"
  }
}