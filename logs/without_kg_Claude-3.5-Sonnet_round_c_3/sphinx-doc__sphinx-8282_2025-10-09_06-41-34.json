{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/ext/autodoc/__init__.py lines 1265-1270)": "\n        if overloaded:\n            __globals__ = safe_getattr(self.object, '__globals__', {})\n            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                overload = evaluate_signature(overload, __globals__,\n                                              self.env.config.autodoc_type_aliases)\n\n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n\n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
    "Location 2 (/root/hy/projects_3/sphinx/sphinx/ext/autodoc/__init__.py lines 1485-1489)": "\n                parameters = list(overload.parameters.values())\n                overload = overload.replace(parameters=parameters[1:],\n                                            return_annotation=Parameter.empty)\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
    "Location 3 (/root/hy/projects_3/sphinx/sphinx/ext/autodoc/__init__.py lines 1848-1851)": "\n                else:\n                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                    sig = inspect.signature(self.object, bound_method=True,\n                                            follow_wrapped=True,\n                                            type_aliases=self.env.config.autodoc_type_aliases)\n                    \n                    # Apply autodoc_typehints configuration\n                    if self.env.config.autodoc_typehints in ('none', 'description'):\n                        kwargs.setdefault('show_annotation', False)\n                    \n                args = stringify_signature(sig, **kwargs)\n",
    "Location 4 (/root/hy/projects_3/sphinx/sphinx/ext/autodoc/__init__.py lines 1914-1918)": "\n                if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                              name=self.object_name):\n                    parameters = list(overload.parameters.values())\n                    overload = overload.replace(parameters=parameters[1:])\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/sphinx/sphinx/ext/autodoc/__init__.py lines 1265-1270)": [
      "\n        if overloaded:\n            __globals__ = safe_getattr(self.object, '__globals__', {})\n            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                overload = evaluate_signature(overload, __globals__,\n                                              self.env.config.autodoc_type_aliases)\n\n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n\n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n        if overloaded:\n            __globals__ = safe_getattr(self.object, '__globals__', {})\n            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                overload = evaluate_signature(overload, __globals__,\n                                              self.env.config.autodoc_type_aliases)\n\n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n\n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n        if overloaded:\n            __globals__ = safe_getattr(self.object, '__globals__', {})\n            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                overload = evaluate_signature(overload, __globals__,\n                                              self.env.config.autodoc_type_aliases)\n\n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n\n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n        if overloaded:\n            __globals__ = safe_getattr(self.object, '__globals__', {})\n            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                overload = evaluate_signature(overload, __globals__,\n                                              self.env.config.autodoc_type_aliases)\n\n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n\n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n        if overloaded:\n            __globals__ = safe_getattr(self.object, '__globals__', {})\n            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                overload = evaluate_signature(overload, __globals__,\n                                              self.env.config.autodoc_type_aliases)\n\n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n\n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n        if overloaded:\n            __globals__ = safe_getattr(self.object, '__globals__', {})\n            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                overload = evaluate_signature(overload, __globals__,\n                                              self.env.config.autodoc_type_aliases)\n\n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n\n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n        if overloaded:\n            __globals__ = safe_getattr(self.object, '__globals__', {})\n            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                overload = evaluate_signature(overload, __globals__,\n                                              self.env.config.autodoc_type_aliases)\n\n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n\n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n        if overloaded:\n            __globals__ = safe_getattr(self.object, '__globals__', {})\n            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                overload = evaluate_signature(overload, __globals__,\n                                              self.env.config.autodoc_type_aliases)\n\n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n\n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n"
    ],
    "Location 2 (/root/hy/projects_3/sphinx/sphinx/ext/autodoc/__init__.py lines 1485-1489)": [
      "\n                parameters = list(overload.parameters.values())\n                overload = overload.replace(parameters=parameters[1:],\n                                            return_annotation=Parameter.empty)\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                parameters = list(overload.parameters.values())\n                overload = overload.replace(parameters=parameters[1:],\n                                            return_annotation=Parameter.empty)\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                parameters = list(overload.parameters.values())\n                overload = overload.replace(parameters=parameters[1:],\n                                            return_annotation=Parameter.empty)\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                parameters = list(overload.parameters.values())\n                overload = overload.replace(parameters=parameters[1:],\n                                            return_annotation=Parameter.empty)\n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                parameters = list(overload.parameters.values())\n                overload = overload.replace(parameters=parameters[1:],\n                                            return_annotation=Parameter.empty)\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                parameters = list(overload.parameters.values())\n                overload = overload.replace(parameters=parameters[1:],\n                                            return_annotation=Parameter.empty)\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                parameters = list(overload.parameters.values())\n                overload = overload.replace(parameters=parameters[1:],\n                                            return_annotation=Parameter.empty)\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                parameters = list(overload.parameters.values())\n                overload = overload.replace(parameters=parameters[1:],\n                                            return_annotation=Parameter.empty)\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n"
    ],
    "Location 3 (/root/hy/projects_3/sphinx/sphinx/ext/autodoc/__init__.py lines 1848-1851)": [
      "\n                else:\n                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                    sig = inspect.signature(self.object, bound_method=True,\n                                            follow_wrapped=True,\n                                            type_aliases=self.env.config.autodoc_type_aliases)\n                    \n                    # Apply autodoc_typehints configuration\n                    if self.env.config.autodoc_typehints in ('none', 'description'):\n                        kwargs.setdefault('show_annotation', False)\n                    \n                args = stringify_signature(sig, **kwargs)\n",
      "\n                else:\n                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                    sig = inspect.signature(self.object, bound_method=True,\n                                            follow_wrapped=True,\n                                            type_aliases=self.env.config.autodoc_type_aliases)\n                    \n                    # Apply autodoc_typehints configuration\n                    if self.env.config.autodoc_typehints in ('none', 'description'):\n                        kwargs.setdefault('show_annotation', False)\n                    \n                args = stringify_signature(sig, **kwargs)\n",
      "\n                else:\n                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                    sig = inspect.signature(self.object, bound_method=True,\n                                            follow_wrapped=True,\n                                            type_aliases=self.env.config.autodoc_type_aliases)\n                    \n                    # Apply autodoc_typehints configuration\n                    if self.env.config.autodoc_typehints in ('none', 'description'):\n                        kwargs.setdefault('show_annotation', False)\n                    \n                args = stringify_signature(sig, **kwargs)\n",
      "\n                else:\n                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                    sig = inspect.signature(self.object, bound_method=True,\n                                            follow_wrapped=True,\n                                            type_aliases=self.env.config.autodoc_type_aliases)\n                    \n                    # Apply autodoc_typehints configuration\n                    if self.env.config.autodoc_typehints in ('none', 'description'):\n                        kwargs.setdefault('show_annotation', False)\n                    \n                args = stringify_signature(sig, **kwargs)\n",
      "\n                else:\n                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                    sig = inspect.signature(self.object, bound_method=True,\n                                            follow_wrapped=True,\n                                            type_aliases=self.env.config.autodoc_type_aliases)\n                    # Apply autodoc_typehints configuration\n                    if self.env.config.autodoc_typehints in ('none', 'description'):\n                        kwargs.setdefault('show_annotation', False)\n                args = stringify_signature(sig, **kwargs)\n",
      "\n                else:\n                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                    sig = inspect.signature(self.object, bound_method=True,\n                                            follow_wrapped=True,\n                                            type_aliases=self.env.config.autodoc_type_aliases)\n                    \n                    # Apply autodoc_typehints configuration\n                    if self.env.config.autodoc_typehints in ('none', 'description'):\n                        kwargs.setdefault('show_annotation', False)\n                    \n                args = stringify_signature(sig, **kwargs)\n",
      "\n                else:\n                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                    sig = inspect.signature(self.object, bound_method=True,\n                                            follow_wrapped=True,\n                                            type_aliases=self.env.config.autodoc_type_aliases)\n                    \n                    # Apply autodoc_typehints configuration\n                    if self.env.config.autodoc_typehints in ('none', 'description'):\n                        kwargs.setdefault('show_annotation', False)\n                    \n                args = stringify_signature(sig, **kwargs)\n",
      "\n                else:\n                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                    sig = inspect.signature(self.object, bound_method=True,\n                                            follow_wrapped=True,\n                                            type_aliases=self.env.config.autodoc_type_aliases)\n                    \n                    # Apply autodoc_typehints configuration\n                    if self.env.config.autodoc_typehints in ('none', 'description'):\n                        kwargs.setdefault('show_annotation', False)\n                    \n                args = stringify_signature(sig, **kwargs)\n"
    ],
    "Location 4 (/root/hy/projects_3/sphinx/sphinx/ext/autodoc/__init__.py lines 1914-1918)": [
      "\n                if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                              name=self.object_name):\n                    parameters = list(overload.parameters.values())\n                    overload = overload.replace(parameters=parameters[1:])\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                              name=self.object_name):\n                    parameters = list(overload.parameters.values())\n                    overload = overload.replace(parameters=parameters[1:])\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                              name=self.object_name):\n                    parameters = list(overload.parameters.values())\n                    overload = overload.replace(parameters=parameters[1:])\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                              name=self.object_name):\n                    parameters = list(overload.parameters.values())\n                    overload = overload.replace(parameters=parameters[1:])\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                              name=self.object_name):\n                    parameters = list(overload.parameters.values())\n                    overload = overload.replace(parameters=parameters[1:])\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                              name=self.object_name):\n                    parameters = list(overload.parameters.values())\n                    overload = overload.replace(parameters=parameters[1:])\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                              name=self.object_name):\n                    parameters = list(overload.parameters.values())\n                    overload = overload.replace(parameters=parameters[1:])\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n",
      "\n                if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                              name=self.object_name):\n                    parameters = list(overload.parameters.values())\n                    overload = overload.replace(parameters=parameters[1:])\n                \n                # Apply autodoc_typehints configuration\n                if self.env.config.autodoc_typehints in ('none', 'description'):\n                    kwargs.setdefault('show_annotation', False)\n                \n                sig = stringify_signature(overload, **kwargs)\n                sigs.append(sig)\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..a07ba7b56 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1262,10 +1262,15 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     sigs.append(documenter.format_signature())\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n+\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                # Apply autodoc_typehints configuration (same as format_args method)\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1482,9 +1487,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         else:\n@@ -1845,9 +1856,15 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n+\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1911,9 +1928,15 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                                               self.env.config.autodoc_type_aliases)\n \n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n+\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n",
    "variant_0": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..8f7abdca6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1260,12 +1260,19 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     documenter.object = func\n                     documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n+        if overloaded:\n+            __globals__ = safe_getattr(self.object, '__globals__', {})\n+\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1482,9 +1489,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         else:\n@@ -1843,11 +1856,19 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n                     sig = inspect.signature(self.object, bound_method=False,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                else:\n+                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n+\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                    \n+                    # Apply autodoc_typehints configuration\n+                    if self.env.config.autodoc_typehints in ('none', 'description'):\n+                        kwargs.setdefault('show_annotation', False)\n+                    \n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1910,10 +1931,17 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                if not inspect.isstaticmethod(self.object, cls=self.parent,\n+\n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n",
    "variant_1": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..8f7abdca6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1260,12 +1260,19 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     documenter.object = func\n                     documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n+        if overloaded:\n+            __globals__ = safe_getattr(self.object, '__globals__', {})\n+\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1482,9 +1489,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         else:\n@@ -1843,11 +1856,19 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n                     sig = inspect.signature(self.object, bound_method=False,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                else:\n+                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n+\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                    \n+                    # Apply autodoc_typehints configuration\n+                    if self.env.config.autodoc_typehints in ('none', 'description'):\n+                        kwargs.setdefault('show_annotation', False)\n+                    \n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1910,10 +1931,17 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                if not inspect.isstaticmethod(self.object, cls=self.parent,\n+\n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n",
    "variant_2": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..8f7abdca6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1260,12 +1260,19 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     documenter.object = func\n                     documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n+        if overloaded:\n+            __globals__ = safe_getattr(self.object, '__globals__', {})\n+\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1482,9 +1489,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         else:\n@@ -1843,11 +1856,19 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n                     sig = inspect.signature(self.object, bound_method=False,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                else:\n+                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n+\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                    \n+                    # Apply autodoc_typehints configuration\n+                    if self.env.config.autodoc_typehints in ('none', 'description'):\n+                        kwargs.setdefault('show_annotation', False)\n+                    \n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1910,10 +1931,17 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                if not inspect.isstaticmethod(self.object, cls=self.parent,\n+\n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n",
    "variant_3": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..8f7abdca6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1260,12 +1260,19 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     documenter.object = func\n                     documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n+        if overloaded:\n+            __globals__ = safe_getattr(self.object, '__globals__', {})\n+\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1482,9 +1489,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         else:\n@@ -1843,11 +1856,19 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n                     sig = inspect.signature(self.object, bound_method=False,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                else:\n+                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n+\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                    \n+                    # Apply autodoc_typehints configuration\n+                    if self.env.config.autodoc_typehints in ('none', 'description'):\n+                        kwargs.setdefault('show_annotation', False)\n+                    \n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1910,10 +1931,17 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                if not inspect.isstaticmethod(self.object, cls=self.parent,\n+\n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n",
    "variant_4": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..9760213f7 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1260,12 +1260,19 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     documenter.object = func\n                     documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n+        if overloaded:\n+            __globals__ = safe_getattr(self.object, '__globals__', {})\n+\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1482,9 +1489,13 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         else:\n@@ -1843,11 +1854,19 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n                     sig = inspect.signature(self.object, bound_method=False,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                else:\n+                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n+\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                    \n+                    # Apply autodoc_typehints configuration\n+                    if self.env.config.autodoc_typehints in ('none', 'description'):\n+                        kwargs.setdefault('show_annotation', False)\n+                    \n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1910,10 +1929,17 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                if not inspect.isstaticmethod(self.object, cls=self.parent,\n+\n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n",
    "variant_5": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..70a1c5a23 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1260,12 +1260,19 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     documenter.object = func\n                     documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n+        if overloaded:\n+            __globals__ = safe_getattr(self.object, '__globals__', {})\n+\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1482,9 +1489,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         else:\n@@ -1843,11 +1856,17 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n                     sig = inspect.signature(self.object, bound_method=False,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                else:\n+                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n+\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                    # Apply autodoc_typehints configuration\n+                    if self.env.config.autodoc_typehints in ('none', 'description'):\n+                        kwargs.setdefault('show_annotation', False)\n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1910,10 +1929,17 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                if not inspect.isstaticmethod(self.object, cls=self.parent,\n+\n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n",
    "variant_6": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..8f7abdca6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1260,12 +1260,19 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     documenter.object = func\n                     documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n+        if overloaded:\n+            __globals__ = safe_getattr(self.object, '__globals__', {})\n+\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1482,9 +1489,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         else:\n@@ -1843,11 +1856,19 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n                     sig = inspect.signature(self.object, bound_method=False,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                else:\n+                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n+\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                    \n+                    # Apply autodoc_typehints configuration\n+                    if self.env.config.autodoc_typehints in ('none', 'description'):\n+                        kwargs.setdefault('show_annotation', False)\n+                    \n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1910,10 +1931,17 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                if not inspect.isstaticmethod(self.object, cls=self.parent,\n+\n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n",
    "variant_7": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..8f7abdca6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1260,12 +1260,19 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     documenter.object = func\n                     documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n+        if overloaded:\n+            __globals__ = safe_getattr(self.object, '__globals__', {})\n+\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1482,9 +1489,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         else:\n@@ -1843,11 +1856,19 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n                     sig = inspect.signature(self.object, bound_method=False,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                else:\n+                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n+\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                    \n+                    # Apply autodoc_typehints configuration\n+                    if self.env.config.autodoc_typehints in ('none', 'description'):\n+                        kwargs.setdefault('show_annotation', False)\n+                    \n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1910,10 +1931,17 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                if not inspect.isstaticmethod(self.object, cls=self.parent,\n+\n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n",
    "variant_8": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..8f7abdca6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1260,12 +1260,19 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     documenter.object = func\n                     documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n+        if overloaded:\n+            __globals__ = safe_getattr(self.object, '__globals__', {})\n+\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1482,9 +1489,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         else:\n@@ -1843,11 +1856,19 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n                     sig = inspect.signature(self.object, bound_method=False,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                else:\n+                    self.env.app.emit('autodoc-before-process-signature', self.object, True)\n+\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n+                    \n+                    # Apply autodoc_typehints configuration\n+                    if self.env.config.autodoc_typehints in ('none', 'description'):\n+                        kwargs.setdefault('show_annotation', False)\n+                    \n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1910,10 +1931,17 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n+                if not inspect.isstaticmethod(self.object, cls=self.parent,\n+\n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n+                \n+                # Apply autodoc_typehints configuration\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    kwargs.setdefault('show_annotation', False)\n+                \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n"
  }
}