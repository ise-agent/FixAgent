{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/pytest/src/_pytest/_code/code.py lines 791-799)": "\ndef _makepath(self, path):\n    if not self.abspath:\n        try:\n            np = self.original_cwd.bestrelpath(path)\n        except OSError:\n            return path\n        if len(np) < len(str(path)):\n            path = np\n    return path\n",
    "Location 2 (/root/hy/projects_3/pytest/src/_pytest/_code/code.py lines 651-658)": "\n@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(type=bool, default=False)\n    style = attr.ib(type=\"_TracebackStyle\", default=\"long\")\n    abspath = attr.ib(type=bool, default=True)\n    tbfilter = attr.ib(type=bool, default=True)\n    funcargs = attr.ib(type=bool, default=False)\n    truncate_locals = attr.ib(type=bool, default=True)\n    chain = attr.ib(type=bool, default=True)\n    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n",
    "Location 3 (/root/hy/projects_3/pytest/src/_pytest/_code/code.py lines 617-625)": "\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        fmt.original_cwd = py.path.local()\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/pytest/src/_pytest/_code/code.py lines 791-799)": [
      "\ndef _makepath(self, path):\n    if not self.abspath:\n        try:\n            np = self.original_cwd.bestrelpath(path)\n        except OSError:\n            return path\n        if len(np) < len(str(path)):\n            path = np\n    return path\n",
      "\ndef _makepath(self, path):\n    if not self.abspath:\n        try:\n            np = self.original_cwd.bestrelpath(path)\n        except OSError:\n            return path\n        if len(np) < len(str(path)):\n            path = np\n    return path\n",
      "\ndef _makepath(self, path):\n    if not self.abspath:\n        try:\n            np = self.original_cwd.bestrelpath(path)\n        except OSError:\n            return path\n        if len(np) < len(str(path)):\n            path = np\n    return path\n",
      "\ndef _makepath(self, path):\n    if not self.abspath:\n        try:\n            np = self.original_cwd.bestrelpath(path)\n        except OSError:\n            return path\n        if len(np) < len(str(path)):\n            path = np\n    return path\n",
      "\ndef _makepath(self, path):\n    if not self.abspath:\n        try:\n            np = self.original_cwd.bestrelpath(path)\n        except OSError:\n            return path\n        if len(np) < len(str(path)):\n            path = np\n    return path\n",
      "\ndef _makepath(self, path):\n    if not self.abspath:\n        try:\n            np = self.original_cwd.bestrelpath(path)\n        except OSError:\n            return path\n        if len(np) < len(str(path)):\n            path = np\n    return path\n",
      "\ndef _makepath(self, path):\n    if not self.abspath:\n        try:\n            np = self.original_cwd.bestrelpath(path)\n        except OSError:\n            return path\n        if len(np) < len(str(path)):\n            path = np\n    return path\n",
      "\n    def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = self.original_cwd.bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path\n"
    ],
    "Location 2 (/root/hy/projects_3/pytest/src/_pytest/_code/code.py lines 651-658)": [
      "\n@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(type=bool, default=False)\n    style = attr.ib(type=\"_TracebackStyle\", default=\"long\")\n    abspath = attr.ib(type=bool, default=True)\n    tbfilter = attr.ib(type=bool, default=True)\n    funcargs = attr.ib(type=bool, default=False)\n    truncate_locals = attr.ib(type=bool, default=True)\n    chain = attr.ib(type=bool, default=True)\n    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n",
      "\n@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(type=bool, default=False)\n    style = attr.ib(type=\"_TracebackStyle\", default=\"long\")\n    abspath = attr.ib(type=bool, default=True)\n    tbfilter = attr.ib(type=bool, default=True)\n    funcargs = attr.ib(type=bool, default=False)\n    truncate_locals = attr.ib(type=bool, default=True)\n    chain = attr.ib(type=bool, default=True)\n    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n",
      "\n@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(type=bool, default=False)\n    style = attr.ib(type=\"_TracebackStyle\", default=\"long\")\n    abspath = attr.ib(type=bool, default=True)\n    tbfilter = attr.ib(type=bool, default=True)\n    funcargs = attr.ib(type=bool, default=False)\n    truncate_locals = attr.ib(type=bool, default=True)\n    chain = attr.ib(type=bool, default=True)\n    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n",
      "\n@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(type=bool, default=False)\n    style = attr.ib(type=\"_TracebackStyle\", default=\"long\")\n    abspath = attr.ib(type=bool, default=True)\n    tbfilter = attr.ib(type=bool, default=True)\n    funcargs = attr.ib(type=bool, default=False)\n    truncate_locals = attr.ib(type=bool, default=True)\n    chain = attr.ib(type=bool, default=True)\n    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n",
      "\n@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(type=bool, default=False)\n    style = attr.ib(type=\"_TracebackStyle\", default=\"long\")\n    abspath = attr.ib(type=bool, default=True)\n    tbfilter = attr.ib(type=bool, default=True)\n    funcargs = attr.ib(type=bool, default=False)\n    truncate_locals = attr.ib(type=bool, default=True)\n    chain = attr.ib(type=bool, default=True)\n    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n",
      "\n@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(type=bool, default=False)\n    style = attr.ib(type=\"_TracebackStyle\", default=\"long\")\n    abspath = attr.ib(type=bool, default=True)\n    tbfilter = attr.ib(type=bool, default=True)\n    funcargs = attr.ib(type=bool, default=False)\n    truncate_locals = attr.ib(type=bool, default=True)\n    chain = attr.ib(type=bool, default=True)\n    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n",
      "\n@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(type=bool, default=False)\n    style = attr.ib(type=\"_TracebackStyle\", default=\"long\")\n    abspath = attr.ib(type=bool, default=True)\n    tbfilter = attr.ib(type=bool, default=True)\n    funcargs = attr.ib(type=bool, default=False)\n    truncate_locals = attr.ib(type=bool, default=True)\n    chain = attr.ib(type=bool, default=True)\n    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n",
      "\n@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(type=bool, default=False)\n    style = attr.ib(type=\"_TracebackStyle\", default=\"long\")\n    abspath = attr.ib(type=bool, default=True)\n    tbfilter = attr.ib(type=bool, default=True)\n    funcargs = attr.ib(type=bool, default=False)\n    truncate_locals = attr.ib(type=bool, default=True)\n    chain = attr.ib(type=bool, default=True)\n    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n"
    ],
    "Location 3 (/root/hy/projects_3/pytest/src/_pytest/_code/code.py lines 617-625)": [
      "\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        fmt.original_cwd = py.path.local()\n",
      "\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        fmt.original_cwd = py.path.local()\n",
      "\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        fmt.original_cwd = py.path.local()\n",
      "\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        fmt.original_cwd = py.path.local()\n",
      "\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        fmt.original_cwd = py.path.local()\n",
      "\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        fmt.original_cwd = py.path.local()\n",
      "\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        fmt.original_cwd = py.path.local()\n",
      "\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        fmt.original_cwd = py.path.local()\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 7b17d7612..3d38b31ab 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -614,6 +614,7 @@ class ExceptionInfo(Generic[_E]):\n                 self._getreprcrash(),\n             )\n \n+\n         fmt = FormattedExcinfo(\n             showlocals=showlocals,\n             style=style,\n@@ -623,6 +624,7 @@ class ExceptionInfo(Generic[_E]):\n             truncate_locals=truncate_locals,\n             chain=chain,\n         )\n+        fmt.original_cwd = py.path.local()\n         return fmt.repr_excinfo(self)\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n@@ -648,6 +650,7 @@ class FormattedExcinfo:\n     flow_marker = \">\"\n     fail_marker = \"E\"\n \n+\n     showlocals = attr.ib(type=bool, default=False)\n     style = attr.ib(type=\"_TracebackStyle\", default=\"long\")\n     abspath = attr.ib(type=bool, default=True)\n@@ -656,6 +659,7 @@ class FormattedExcinfo:\n     truncate_locals = attr.ib(type=bool, default=True)\n     chain = attr.ib(type=bool, default=True)\n     astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n+    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n \n     def _getindent(self, source: \"Source\") -> int:\n         # figure out indent for given source\n@@ -788,10 +792,11 @@ class FormattedExcinfo:\n                 lines.extend(self.get_exconly(excinfo, indent=4))\n             return ReprEntry(lines, None, None, None, style)\n \n+\n     def _makepath(self, path):\n         if not self.abspath:\n             try:\n-                np = py.path.local().bestrelpath(path)\n+                np = self.original_cwd.bestrelpath(path)\n             except OSError:\n                 return path\n             if len(np) < len(str(path)):\n",
    "variant_0": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 7b17d7612..9f001d790 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -614,6 +614,7 @@ class ExceptionInfo(Generic[_E]):\n                 self._getreprcrash(),\n             )\n \n+\n         fmt = FormattedExcinfo(\n             showlocals=showlocals,\n             style=style,\n@@ -623,6 +624,7 @@ class ExceptionInfo(Generic[_E]):\n             truncate_locals=truncate_locals,\n             chain=chain,\n         )\n+        fmt.original_cwd = py.path.local()\n         return fmt.repr_excinfo(self)\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n@@ -640,6 +642,15 @@ class ExceptionInfo(Generic[_E]):\n         return True\n \n \n+@attr.s\n+class FormattedExcinfo:\n+    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n+\n+    # for traceback entries\n+    flow_marker = \">\"\n+    fail_marker = \"E\"\n+\n+\n @attr.s\n class FormattedExcinfo:\n     \"\"\" presenting information about failing Functions and Generators. \"\"\"\n@@ -655,6 +666,7 @@ class FormattedExcinfo:\n     funcargs = attr.ib(type=bool, default=False)\n     truncate_locals = attr.ib(type=bool, default=True)\n     chain = attr.ib(type=bool, default=True)\n+    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n     astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n \n     def _getindent(self, source: \"Source\") -> int:\n@@ -788,15 +800,16 @@ class FormattedExcinfo:\n                 lines.extend(self.get_exconly(excinfo, indent=4))\n             return ReprEntry(lines, None, None, None, style)\n \n-    def _makepath(self, path):\n-        if not self.abspath:\n-            try:\n-                np = py.path.local().bestrelpath(path)\n-            except OSError:\n-                return path\n-            if len(np) < len(str(path)):\n-                path = np\n-        return path\n+\n+def _makepath(self, path):\n+    if not self.abspath:\n+        try:\n+            np = self.original_cwd.bestrelpath(path)\n+        except OSError:\n+            return path\n+        if len(np) < len(str(path)):\n+            path = np\n+    return path\n \n     def repr_traceback(self, excinfo: ExceptionInfo) -> \"ReprTraceback\":\n         traceback = excinfo.traceback\n",
    "variant_1": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 7b17d7612..9f001d790 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -614,6 +614,7 @@ class ExceptionInfo(Generic[_E]):\n                 self._getreprcrash(),\n             )\n \n+\n         fmt = FormattedExcinfo(\n             showlocals=showlocals,\n             style=style,\n@@ -623,6 +624,7 @@ class ExceptionInfo(Generic[_E]):\n             truncate_locals=truncate_locals,\n             chain=chain,\n         )\n+        fmt.original_cwd = py.path.local()\n         return fmt.repr_excinfo(self)\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n@@ -640,6 +642,15 @@ class ExceptionInfo(Generic[_E]):\n         return True\n \n \n+@attr.s\n+class FormattedExcinfo:\n+    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n+\n+    # for traceback entries\n+    flow_marker = \">\"\n+    fail_marker = \"E\"\n+\n+\n @attr.s\n class FormattedExcinfo:\n     \"\"\" presenting information about failing Functions and Generators. \"\"\"\n@@ -655,6 +666,7 @@ class FormattedExcinfo:\n     funcargs = attr.ib(type=bool, default=False)\n     truncate_locals = attr.ib(type=bool, default=True)\n     chain = attr.ib(type=bool, default=True)\n+    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n     astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n \n     def _getindent(self, source: \"Source\") -> int:\n@@ -788,15 +800,16 @@ class FormattedExcinfo:\n                 lines.extend(self.get_exconly(excinfo, indent=4))\n             return ReprEntry(lines, None, None, None, style)\n \n-    def _makepath(self, path):\n-        if not self.abspath:\n-            try:\n-                np = py.path.local().bestrelpath(path)\n-            except OSError:\n-                return path\n-            if len(np) < len(str(path)):\n-                path = np\n-        return path\n+\n+def _makepath(self, path):\n+    if not self.abspath:\n+        try:\n+            np = self.original_cwd.bestrelpath(path)\n+        except OSError:\n+            return path\n+        if len(np) < len(str(path)):\n+            path = np\n+    return path\n \n     def repr_traceback(self, excinfo: ExceptionInfo) -> \"ReprTraceback\":\n         traceback = excinfo.traceback\n",
    "variant_2": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 7b17d7612..9f001d790 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -614,6 +614,7 @@ class ExceptionInfo(Generic[_E]):\n                 self._getreprcrash(),\n             )\n \n+\n         fmt = FormattedExcinfo(\n             showlocals=showlocals,\n             style=style,\n@@ -623,6 +624,7 @@ class ExceptionInfo(Generic[_E]):\n             truncate_locals=truncate_locals,\n             chain=chain,\n         )\n+        fmt.original_cwd = py.path.local()\n         return fmt.repr_excinfo(self)\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n@@ -640,6 +642,15 @@ class ExceptionInfo(Generic[_E]):\n         return True\n \n \n+@attr.s\n+class FormattedExcinfo:\n+    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n+\n+    # for traceback entries\n+    flow_marker = \">\"\n+    fail_marker = \"E\"\n+\n+\n @attr.s\n class FormattedExcinfo:\n     \"\"\" presenting information about failing Functions and Generators. \"\"\"\n@@ -655,6 +666,7 @@ class FormattedExcinfo:\n     funcargs = attr.ib(type=bool, default=False)\n     truncate_locals = attr.ib(type=bool, default=True)\n     chain = attr.ib(type=bool, default=True)\n+    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n     astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n \n     def _getindent(self, source: \"Source\") -> int:\n@@ -788,15 +800,16 @@ class FormattedExcinfo:\n                 lines.extend(self.get_exconly(excinfo, indent=4))\n             return ReprEntry(lines, None, None, None, style)\n \n-    def _makepath(self, path):\n-        if not self.abspath:\n-            try:\n-                np = py.path.local().bestrelpath(path)\n-            except OSError:\n-                return path\n-            if len(np) < len(str(path)):\n-                path = np\n-        return path\n+\n+def _makepath(self, path):\n+    if not self.abspath:\n+        try:\n+            np = self.original_cwd.bestrelpath(path)\n+        except OSError:\n+            return path\n+        if len(np) < len(str(path)):\n+            path = np\n+    return path\n \n     def repr_traceback(self, excinfo: ExceptionInfo) -> \"ReprTraceback\":\n         traceback = excinfo.traceback\n",
    "variant_3": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 7b17d7612..9f001d790 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -614,6 +614,7 @@ class ExceptionInfo(Generic[_E]):\n                 self._getreprcrash(),\n             )\n \n+\n         fmt = FormattedExcinfo(\n             showlocals=showlocals,\n             style=style,\n@@ -623,6 +624,7 @@ class ExceptionInfo(Generic[_E]):\n             truncate_locals=truncate_locals,\n             chain=chain,\n         )\n+        fmt.original_cwd = py.path.local()\n         return fmt.repr_excinfo(self)\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n@@ -640,6 +642,15 @@ class ExceptionInfo(Generic[_E]):\n         return True\n \n \n+@attr.s\n+class FormattedExcinfo:\n+    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n+\n+    # for traceback entries\n+    flow_marker = \">\"\n+    fail_marker = \"E\"\n+\n+\n @attr.s\n class FormattedExcinfo:\n     \"\"\" presenting information about failing Functions and Generators. \"\"\"\n@@ -655,6 +666,7 @@ class FormattedExcinfo:\n     funcargs = attr.ib(type=bool, default=False)\n     truncate_locals = attr.ib(type=bool, default=True)\n     chain = attr.ib(type=bool, default=True)\n+    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n     astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n \n     def _getindent(self, source: \"Source\") -> int:\n@@ -788,15 +800,16 @@ class FormattedExcinfo:\n                 lines.extend(self.get_exconly(excinfo, indent=4))\n             return ReprEntry(lines, None, None, None, style)\n \n-    def _makepath(self, path):\n-        if not self.abspath:\n-            try:\n-                np = py.path.local().bestrelpath(path)\n-            except OSError:\n-                return path\n-            if len(np) < len(str(path)):\n-                path = np\n-        return path\n+\n+def _makepath(self, path):\n+    if not self.abspath:\n+        try:\n+            np = self.original_cwd.bestrelpath(path)\n+        except OSError:\n+            return path\n+        if len(np) < len(str(path)):\n+            path = np\n+    return path\n \n     def repr_traceback(self, excinfo: ExceptionInfo) -> \"ReprTraceback\":\n         traceback = excinfo.traceback\n",
    "variant_4": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 7b17d7612..9f001d790 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -614,6 +614,7 @@ class ExceptionInfo(Generic[_E]):\n                 self._getreprcrash(),\n             )\n \n+\n         fmt = FormattedExcinfo(\n             showlocals=showlocals,\n             style=style,\n@@ -623,6 +624,7 @@ class ExceptionInfo(Generic[_E]):\n             truncate_locals=truncate_locals,\n             chain=chain,\n         )\n+        fmt.original_cwd = py.path.local()\n         return fmt.repr_excinfo(self)\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n@@ -640,6 +642,15 @@ class ExceptionInfo(Generic[_E]):\n         return True\n \n \n+@attr.s\n+class FormattedExcinfo:\n+    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n+\n+    # for traceback entries\n+    flow_marker = \">\"\n+    fail_marker = \"E\"\n+\n+\n @attr.s\n class FormattedExcinfo:\n     \"\"\" presenting information about failing Functions and Generators. \"\"\"\n@@ -655,6 +666,7 @@ class FormattedExcinfo:\n     funcargs = attr.ib(type=bool, default=False)\n     truncate_locals = attr.ib(type=bool, default=True)\n     chain = attr.ib(type=bool, default=True)\n+    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n     astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n \n     def _getindent(self, source: \"Source\") -> int:\n@@ -788,15 +800,16 @@ class FormattedExcinfo:\n                 lines.extend(self.get_exconly(excinfo, indent=4))\n             return ReprEntry(lines, None, None, None, style)\n \n-    def _makepath(self, path):\n-        if not self.abspath:\n-            try:\n-                np = py.path.local().bestrelpath(path)\n-            except OSError:\n-                return path\n-            if len(np) < len(str(path)):\n-                path = np\n-        return path\n+\n+def _makepath(self, path):\n+    if not self.abspath:\n+        try:\n+            np = self.original_cwd.bestrelpath(path)\n+        except OSError:\n+            return path\n+        if len(np) < len(str(path)):\n+            path = np\n+    return path\n \n     def repr_traceback(self, excinfo: ExceptionInfo) -> \"ReprTraceback\":\n         traceback = excinfo.traceback\n",
    "variant_5": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 7b17d7612..9f001d790 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -614,6 +614,7 @@ class ExceptionInfo(Generic[_E]):\n                 self._getreprcrash(),\n             )\n \n+\n         fmt = FormattedExcinfo(\n             showlocals=showlocals,\n             style=style,\n@@ -623,6 +624,7 @@ class ExceptionInfo(Generic[_E]):\n             truncate_locals=truncate_locals,\n             chain=chain,\n         )\n+        fmt.original_cwd = py.path.local()\n         return fmt.repr_excinfo(self)\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n@@ -640,6 +642,15 @@ class ExceptionInfo(Generic[_E]):\n         return True\n \n \n+@attr.s\n+class FormattedExcinfo:\n+    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n+\n+    # for traceback entries\n+    flow_marker = \">\"\n+    fail_marker = \"E\"\n+\n+\n @attr.s\n class FormattedExcinfo:\n     \"\"\" presenting information about failing Functions and Generators. \"\"\"\n@@ -655,6 +666,7 @@ class FormattedExcinfo:\n     funcargs = attr.ib(type=bool, default=False)\n     truncate_locals = attr.ib(type=bool, default=True)\n     chain = attr.ib(type=bool, default=True)\n+    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n     astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n \n     def _getindent(self, source: \"Source\") -> int:\n@@ -788,15 +800,16 @@ class FormattedExcinfo:\n                 lines.extend(self.get_exconly(excinfo, indent=4))\n             return ReprEntry(lines, None, None, None, style)\n \n-    def _makepath(self, path):\n-        if not self.abspath:\n-            try:\n-                np = py.path.local().bestrelpath(path)\n-            except OSError:\n-                return path\n-            if len(np) < len(str(path)):\n-                path = np\n-        return path\n+\n+def _makepath(self, path):\n+    if not self.abspath:\n+        try:\n+            np = self.original_cwd.bestrelpath(path)\n+        except OSError:\n+            return path\n+        if len(np) < len(str(path)):\n+            path = np\n+    return path\n \n     def repr_traceback(self, excinfo: ExceptionInfo) -> \"ReprTraceback\":\n         traceback = excinfo.traceback\n",
    "variant_6": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 7b17d7612..9f001d790 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -614,6 +614,7 @@ class ExceptionInfo(Generic[_E]):\n                 self._getreprcrash(),\n             )\n \n+\n         fmt = FormattedExcinfo(\n             showlocals=showlocals,\n             style=style,\n@@ -623,6 +624,7 @@ class ExceptionInfo(Generic[_E]):\n             truncate_locals=truncate_locals,\n             chain=chain,\n         )\n+        fmt.original_cwd = py.path.local()\n         return fmt.repr_excinfo(self)\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n@@ -640,6 +642,15 @@ class ExceptionInfo(Generic[_E]):\n         return True\n \n \n+@attr.s\n+class FormattedExcinfo:\n+    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n+\n+    # for traceback entries\n+    flow_marker = \">\"\n+    fail_marker = \"E\"\n+\n+\n @attr.s\n class FormattedExcinfo:\n     \"\"\" presenting information about failing Functions and Generators. \"\"\"\n@@ -655,6 +666,7 @@ class FormattedExcinfo:\n     funcargs = attr.ib(type=bool, default=False)\n     truncate_locals = attr.ib(type=bool, default=True)\n     chain = attr.ib(type=bool, default=True)\n+    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n     astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n \n     def _getindent(self, source: \"Source\") -> int:\n@@ -788,15 +800,16 @@ class FormattedExcinfo:\n                 lines.extend(self.get_exconly(excinfo, indent=4))\n             return ReprEntry(lines, None, None, None, style)\n \n-    def _makepath(self, path):\n-        if not self.abspath:\n-            try:\n-                np = py.path.local().bestrelpath(path)\n-            except OSError:\n-                return path\n-            if len(np) < len(str(path)):\n-                path = np\n-        return path\n+\n+def _makepath(self, path):\n+    if not self.abspath:\n+        try:\n+            np = self.original_cwd.bestrelpath(path)\n+        except OSError:\n+            return path\n+        if len(np) < len(str(path)):\n+            path = np\n+    return path\n \n     def repr_traceback(self, excinfo: ExceptionInfo) -> \"ReprTraceback\":\n         traceback = excinfo.traceback\n",
    "variant_7": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 7b17d7612..9f001d790 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -614,6 +614,7 @@ class ExceptionInfo(Generic[_E]):\n                 self._getreprcrash(),\n             )\n \n+\n         fmt = FormattedExcinfo(\n             showlocals=showlocals,\n             style=style,\n@@ -623,6 +624,7 @@ class ExceptionInfo(Generic[_E]):\n             truncate_locals=truncate_locals,\n             chain=chain,\n         )\n+        fmt.original_cwd = py.path.local()\n         return fmt.repr_excinfo(self)\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n@@ -640,6 +642,15 @@ class ExceptionInfo(Generic[_E]):\n         return True\n \n \n+@attr.s\n+class FormattedExcinfo:\n+    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n+\n+    # for traceback entries\n+    flow_marker = \">\"\n+    fail_marker = \"E\"\n+\n+\n @attr.s\n class FormattedExcinfo:\n     \"\"\" presenting information about failing Functions and Generators. \"\"\"\n@@ -655,6 +666,7 @@ class FormattedExcinfo:\n     funcargs = attr.ib(type=bool, default=False)\n     truncate_locals = attr.ib(type=bool, default=True)\n     chain = attr.ib(type=bool, default=True)\n+    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n     astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n \n     def _getindent(self, source: \"Source\") -> int:\n@@ -788,15 +800,16 @@ class FormattedExcinfo:\n                 lines.extend(self.get_exconly(excinfo, indent=4))\n             return ReprEntry(lines, None, None, None, style)\n \n-    def _makepath(self, path):\n-        if not self.abspath:\n-            try:\n-                np = py.path.local().bestrelpath(path)\n-            except OSError:\n-                return path\n-            if len(np) < len(str(path)):\n-                path = np\n-        return path\n+\n+def _makepath(self, path):\n+    if not self.abspath:\n+        try:\n+            np = self.original_cwd.bestrelpath(path)\n+        except OSError:\n+            return path\n+        if len(np) < len(str(path)):\n+            path = np\n+    return path\n \n     def repr_traceback(self, excinfo: ExceptionInfo) -> \"ReprTraceback\":\n         traceback = excinfo.traceback\n",
    "variant_8": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 7b17d7612..c5259076c 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -614,6 +614,7 @@ class ExceptionInfo(Generic[_E]):\n                 self._getreprcrash(),\n             )\n \n+\n         fmt = FormattedExcinfo(\n             showlocals=showlocals,\n             style=style,\n@@ -623,6 +624,7 @@ class ExceptionInfo(Generic[_E]):\n             truncate_locals=truncate_locals,\n             chain=chain,\n         )\n+        fmt.original_cwd = py.path.local()\n         return fmt.repr_excinfo(self)\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n@@ -640,6 +642,15 @@ class ExceptionInfo(Generic[_E]):\n         return True\n \n \n+@attr.s\n+class FormattedExcinfo:\n+    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n+\n+    # for traceback entries\n+    flow_marker = \">\"\n+    fail_marker = \"E\"\n+\n+\n @attr.s\n class FormattedExcinfo:\n     \"\"\" presenting information about failing Functions and Generators. \"\"\"\n@@ -655,6 +666,7 @@ class FormattedExcinfo:\n     funcargs = attr.ib(type=bool, default=False)\n     truncate_locals = attr.ib(type=bool, default=True)\n     chain = attr.ib(type=bool, default=True)\n+    original_cwd = attr.ib(default=attr.Factory(lambda: py.path.local()), init=False, repr=False)\n     astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n \n     def _getindent(self, source: \"Source\") -> int:\n@@ -788,10 +800,11 @@ class FormattedExcinfo:\n                 lines.extend(self.get_exconly(excinfo, indent=4))\n             return ReprEntry(lines, None, None, None, style)\n \n+\n     def _makepath(self, path):\n         if not self.abspath:\n             try:\n-                np = py.path.local().bestrelpath(path)\n+                np = self.original_cwd.bestrelpath(path)\n             except OSError:\n                 return path\n             if len(np) < len(str(path)):\n"
  }
}