{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/fields/related_descriptors.py lines 76-79)": "\n    def __set__(self, instance, value):\n        if hasattr(value, '_get_pk_val'):\n            # Convert model instance to its primary key value\n            pk_value = value._get_pk_val()\n        else:\n            pk_value = value\n        \n        if instance.__dict__.get(self.field.attname) != pk_value and self.field.is_cached(instance):\n            self.field.delete_cached_value(instance)\n        instance.__dict__[self.field.attname] = pk_value\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/db/models/fields/related_descriptors.py lines 76-79)": [
      "\n    def __set__(self, instance, value):\n        if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n            self.field.delete_cached_value(instance)\n        \n        # Convert model instances to their primary key values\n        if hasattr(value, '_get_pk_val'):\n            pk_value = value._get_pk_val()\n            instance.__dict__[self.field.attname] = pk_value\n        else:\n            instance.__dict__[self.field.attname] = value\n",
      "\n    def __set__(self, instance, value):\n        if hasattr(value, '_get_pk_val'):\n            # Convert model instance to its primary key value\n            pk_value = value._get_pk_val()\n        else:\n            pk_value = value\n        \n        if instance.__dict__.get(self.field.attname) != pk_value and self.field.is_cached(instance):\n            self.field.delete_cached_value(instance)\n        instance.__dict__[self.field.attname] = pk_value\n",
      "\ndef __set__(self, instance, value):\n    if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n        self.field.delete_cached_value(instance)\n    \n    # Convert model instances to their primary key values\n    if hasattr(value, '_get_pk_val'):\n        pk_value = value._get_pk_val()\n        instance.__dict__[self.field.attname] = pk_value\n    else:\n        instance.__dict__[self.field.attname] = value\n",
      "\n    def __set__(self, instance, value):\n        if hasattr(value, '_get_pk_val'):\n            # Convert model instance to its primary key value\n            pk_value = value._get_pk_val()\n        else:\n            pk_value = value\n        \n        if instance.__dict__.get(self.field.attname) != pk_value and self.field.is_cached(instance):\n            self.field.delete_cached_value(instance)\n        instance.__dict__[self.field.attname] = pk_value\n",
      "\ndef __set__(self, instance, value):\n    if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n        self.field.delete_cached_value(instance)\n    \n    # Convert model instances to their primary key values\n    if hasattr(value, '_get_pk_val'):\n        pk_value = value._get_pk_val()\n        instance.__dict__[self.field.attname] = pk_value\n    else:\n        instance.__dict__[self.field.attname] = value\n",
      "\n    def __set__(self, instance, value):\n        if hasattr(value, '_get_pk_val'):\n            # Extract primary key from model instance\n            pk_val = value._get_pk_val()\n        else:\n            pk_val = value\n        \n        if instance.__dict__.get(self.field.attname) != pk_val and self.field.is_cached(instance):\n            self.field.delete_cached_value(instance)\n        instance.__dict__[self.field.attname] = pk_val\n",
      "\ndef __set__(self, instance, value):\n    if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n        self.field.delete_cached_value(instance)\n    \n    # Convert model instance to its primary key value\n    if hasattr(value, '_get_pk_val'):\n        pk_value = value._get_pk_val()\n        instance.__dict__[self.field.attname] = pk_value\n    else:\n        instance.__dict__[self.field.attname] = value\n",
      "\n    def __set__(self, instance, value):\n        if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n            self.field.delete_cached_value(instance)\n        \n        # Convert model instances to their primary key values\n        if hasattr(value, '_get_pk_val'):\n            pk_value = value._get_pk_val()\n            instance.__dict__[self.field.attname] = pk_value\n        else:\n            instance.__dict__[self.field.attname] = value\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..b3c224632b 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -73,7 +73,13 @@ from django.utils.functional import cached_property\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n+\n     def __set__(self, instance, value):\n+        # Convert model instances to their primary key values\n+        if hasattr(value, '_get_pk_val'):\n+            # This is a model instance, extract its primary key\n+            value = value._get_pk_val()\n+        \n         if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n             self.field.delete_cached_value(instance)\n         instance.__dict__[self.field.attname] = value\n",
    "variant_0": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..731848c532 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -73,10 +73,17 @@ from django.utils.functional import cached_property\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n+\n     def __set__(self, instance, value):\n-        if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n+        if hasattr(value, '_get_pk_val'):\n+            # Convert model instance to its primary key value\n+            pk_value = value._get_pk_val()\n+        else:\n+            pk_value = value\n+        \n+        if instance.__dict__.get(self.field.attname) != pk_value and self.field.is_cached(instance):\n             self.field.delete_cached_value(instance)\n-        instance.__dict__[self.field.attname] = value\n+        instance.__dict__[self.field.attname] = pk_value\n \n \n class ForwardManyToOneDescriptor:\n",
    "variant_1": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..2692932f42 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -73,10 +73,17 @@ from django.utils.functional import cached_property\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n+\n     def __set__(self, instance, value):\n         if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n             self.field.delete_cached_value(instance)\n-        instance.__dict__[self.field.attname] = value\n+        \n+        # Convert model instances to their primary key values\n+        if hasattr(value, '_get_pk_val'):\n+            pk_value = value._get_pk_val()\n+            instance.__dict__[self.field.attname] = pk_value\n+        else:\n+            instance.__dict__[self.field.attname] = value\n \n \n class ForwardManyToOneDescriptor:\n",
    "variant_2": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..731848c532 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -73,10 +73,17 @@ from django.utils.functional import cached_property\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n+\n     def __set__(self, instance, value):\n-        if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n+        if hasattr(value, '_get_pk_val'):\n+            # Convert model instance to its primary key value\n+            pk_value = value._get_pk_val()\n+        else:\n+            pk_value = value\n+        \n+        if instance.__dict__.get(self.field.attname) != pk_value and self.field.is_cached(instance):\n             self.field.delete_cached_value(instance)\n-        instance.__dict__[self.field.attname] = value\n+        instance.__dict__[self.field.attname] = pk_value\n \n \n class ForwardManyToOneDescriptor:\n",
    "variant_3": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..72d729be1f 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -73,9 +73,16 @@ from django.utils.functional import cached_property\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n-    def __set__(self, instance, value):\n-        if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n-            self.field.delete_cached_value(instance)\n+\n+def __set__(self, instance, value):\n+    if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n+        self.field.delete_cached_value(instance)\n+    \n+    # Convert model instances to their primary key values\n+    if hasattr(value, '_get_pk_val'):\n+        pk_value = value._get_pk_val()\n+        instance.__dict__[self.field.attname] = pk_value\n+    else:\n         instance.__dict__[self.field.attname] = value\n \n \n",
    "variant_4": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..731848c532 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -73,10 +73,17 @@ from django.utils.functional import cached_property\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n+\n     def __set__(self, instance, value):\n-        if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n+        if hasattr(value, '_get_pk_val'):\n+            # Convert model instance to its primary key value\n+            pk_value = value._get_pk_val()\n+        else:\n+            pk_value = value\n+        \n+        if instance.__dict__.get(self.field.attname) != pk_value and self.field.is_cached(instance):\n             self.field.delete_cached_value(instance)\n-        instance.__dict__[self.field.attname] = value\n+        instance.__dict__[self.field.attname] = pk_value\n \n \n class ForwardManyToOneDescriptor:\n",
    "variant_5": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..72d729be1f 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -73,9 +73,16 @@ from django.utils.functional import cached_property\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n-    def __set__(self, instance, value):\n-        if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n-            self.field.delete_cached_value(instance)\n+\n+def __set__(self, instance, value):\n+    if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n+        self.field.delete_cached_value(instance)\n+    \n+    # Convert model instances to their primary key values\n+    if hasattr(value, '_get_pk_val'):\n+        pk_value = value._get_pk_val()\n+        instance.__dict__[self.field.attname] = pk_value\n+    else:\n         instance.__dict__[self.field.attname] = value\n \n \n",
    "variant_6": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..a3e2b371a6 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -73,10 +73,17 @@ from django.utils.functional import cached_property\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n+\n     def __set__(self, instance, value):\n-        if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n+        if hasattr(value, '_get_pk_val'):\n+            # Extract primary key from model instance\n+            pk_val = value._get_pk_val()\n+        else:\n+            pk_val = value\n+        \n+        if instance.__dict__.get(self.field.attname) != pk_val and self.field.is_cached(instance):\n             self.field.delete_cached_value(instance)\n-        instance.__dict__[self.field.attname] = value\n+        instance.__dict__[self.field.attname] = pk_val\n \n \n class ForwardManyToOneDescriptor:\n",
    "variant_7": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..4b13835171 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -73,9 +73,16 @@ from django.utils.functional import cached_property\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n-    def __set__(self, instance, value):\n-        if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n-            self.field.delete_cached_value(instance)\n+\n+def __set__(self, instance, value):\n+    if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n+        self.field.delete_cached_value(instance)\n+    \n+    # Convert model instance to its primary key value\n+    if hasattr(value, '_get_pk_val'):\n+        pk_value = value._get_pk_val()\n+        instance.__dict__[self.field.attname] = pk_value\n+    else:\n         instance.__dict__[self.field.attname] = value\n \n \n",
    "variant_8": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..2692932f42 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -73,10 +73,17 @@ from django.utils.functional import cached_property\n \n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n+\n     def __set__(self, instance, value):\n         if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n             self.field.delete_cached_value(instance)\n-        instance.__dict__[self.field.attname] = value\n+        \n+        # Convert model instances to their primary key values\n+        if hasattr(value, '_get_pk_val'):\n+            pk_value = value._get_pk_val()\n+            instance.__dict__[self.field.attname] = pk_value\n+        else:\n+            instance.__dict__[self.field.attname] = value\n \n \n class ForwardManyToOneDescriptor:\n"
  }
}