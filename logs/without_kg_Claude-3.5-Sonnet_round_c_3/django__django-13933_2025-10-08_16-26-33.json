{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/django/django/forms/models.py lines 1190-1193)": "\n    default_error_messages = {\n        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                            ' the available choices.'),\n    }\n",
    "Location 2 (/root/hy/projects_3/django/django/forms/models.py lines 1286-1287)": "\n        except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n            raise ValidationError(\n                self.error_messages['invalid_choice'], \n                code='invalid_choice',\n                params={'value': value}\n            )\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/django/django/forms/models.py lines 1190-1193)": [
      "\n    default_error_messages = {\n        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                            ' the available choices.'),\n    }\n",
      "\n    default_error_messages = {\n        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                            ' the available choices.'),\n    }\n",
      "\n    default_error_messages = {\n        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                            ' the available choices.'),\n    }\n",
      "\n    default_error_messages = {\n        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                            ' the available choices.'),\n    }\n",
      "\n    default_error_messages = {\n        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                            ' the available choices.'),\n    }\n",
      "\n    default_error_messages = {\n        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                            ' the available choices.'),\n    }\n",
      "\n    default_error_messages = {\n        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                            ' the available choices.'),\n    }\n",
      "\n    default_error_messages = {\n        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                            ' the available choices.'),\n    }\n"
    ],
    "Location 2 (/root/hy/projects_3/django/django/forms/models.py lines 1286-1287)": [
      "\n        except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n            raise ValidationError(\n                self.error_messages['invalid_choice'], \n                code='invalid_choice',\n                params={'value': value}\n            )\n",
      "\n        except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n            raise ValidationError(\n                self.error_messages['invalid_choice'], \n                code='invalid_choice',\n                params={'value': value}\n            )\n",
      "\n        except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n            raise ValidationError(\n                self.error_messages['invalid_choice'], \n                code='invalid_choice',\n                params={'value': value}\n            )\n",
      "\n        except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n            raise ValidationError(\n                self.error_messages['invalid_choice'], \n                code='invalid_choice',\n                params={'value': value}\n            )\n",
      "\n        except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n            raise ValidationError(\n                self.error_messages['invalid_choice'], \n                code='invalid_choice',\n                params={'value': value}\n            )\n",
      "\n        except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n            raise ValidationError(\n                self.error_messages['invalid_choice'], \n                code='invalid_choice',\n                params={'value': value}\n            )\n",
      "\n        except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n            raise ValidationError(\n                self.error_messages['invalid_choice'], \n                code='invalid_choice',\n                params={'value': value}\n            )\n",
      "\n        except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n            raise ValidationError(\n                self.error_messages['invalid_choice'], \n                code='invalid_choice',\n                params={'value': value}\n            )\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..42cf3fc095 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1187,8 +1187,9 @@ class ModelChoiceField(ChoiceField):\n     \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n+\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1283,8 +1284,13 @@ class ModelChoiceField(ChoiceField):\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n+\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'], \n+                code='invalid_choice',\n+                params={'value': value}\n+            )\n         return value\n \n     def validate(self, value):\n",
    "variant_0": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..42cf3fc095 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1187,8 +1187,9 @@ class ModelChoiceField(ChoiceField):\n     \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n+\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1283,8 +1284,13 @@ class ModelChoiceField(ChoiceField):\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n+\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'], \n+                code='invalid_choice',\n+                params={'value': value}\n+            )\n         return value\n \n     def validate(self, value):\n",
    "variant_1": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..42cf3fc095 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1187,8 +1187,9 @@ class ModelChoiceField(ChoiceField):\n     \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n+\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1283,8 +1284,13 @@ class ModelChoiceField(ChoiceField):\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n+\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'], \n+                code='invalid_choice',\n+                params={'value': value}\n+            )\n         return value\n \n     def validate(self, value):\n",
    "variant_2": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..42cf3fc095 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1187,8 +1187,9 @@ class ModelChoiceField(ChoiceField):\n     \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n+\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1283,8 +1284,13 @@ class ModelChoiceField(ChoiceField):\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n+\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'], \n+                code='invalid_choice',\n+                params={'value': value}\n+            )\n         return value\n \n     def validate(self, value):\n",
    "variant_3": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..42cf3fc095 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1187,8 +1187,9 @@ class ModelChoiceField(ChoiceField):\n     \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n+\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1283,8 +1284,13 @@ class ModelChoiceField(ChoiceField):\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n+\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'], \n+                code='invalid_choice',\n+                params={'value': value}\n+            )\n         return value\n \n     def validate(self, value):\n",
    "variant_4": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..42cf3fc095 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1187,8 +1187,9 @@ class ModelChoiceField(ChoiceField):\n     \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n+\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1283,8 +1284,13 @@ class ModelChoiceField(ChoiceField):\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n+\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'], \n+                code='invalid_choice',\n+                params={'value': value}\n+            )\n         return value\n \n     def validate(self, value):\n",
    "variant_5": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..42cf3fc095 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1187,8 +1187,9 @@ class ModelChoiceField(ChoiceField):\n     \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n+\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1283,8 +1284,13 @@ class ModelChoiceField(ChoiceField):\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n+\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'], \n+                code='invalid_choice',\n+                params={'value': value}\n+            )\n         return value\n \n     def validate(self, value):\n",
    "variant_6": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..42cf3fc095 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1187,8 +1187,9 @@ class ModelChoiceField(ChoiceField):\n     \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n+\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1283,8 +1284,13 @@ class ModelChoiceField(ChoiceField):\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n+\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'], \n+                code='invalid_choice',\n+                params={'value': value}\n+            )\n         return value\n \n     def validate(self, value):\n",
    "variant_7": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..42cf3fc095 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1187,8 +1187,9 @@ class ModelChoiceField(ChoiceField):\n     \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n+\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1283,8 +1284,13 @@ class ModelChoiceField(ChoiceField):\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n+\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'], \n+                code='invalid_choice',\n+                params={'value': value}\n+            )\n         return value\n \n     def validate(self, value):\n",
    "variant_8": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..42cf3fc095 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1187,8 +1187,9 @@ class ModelChoiceField(ChoiceField):\n     \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n+\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1283,8 +1284,13 @@ class ModelChoiceField(ChoiceField):\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n+\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'], \n+                code='invalid_choice',\n+                params={'value': value}\n+            )\n         return value\n \n     def validate(self, value):\n"
  }
}