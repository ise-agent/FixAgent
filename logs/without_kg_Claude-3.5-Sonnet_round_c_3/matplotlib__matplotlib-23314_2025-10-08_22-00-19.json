{
  "zero_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/mpl_toolkits/mplot3d/axes3d.py lines 388-395)": "\n    @martist.allow_rasterization\n    def draw(self, renderer):\n        self._unstale_viewLim()\n        \n        if not self.get_visible():\n            return\n\n        # draw the background patch\n        self.patch.draw(renderer)\n        self._frameon = False\n"
  },
  "variant_patches": {
    "Location 1 (/root/hy/projects_3/matplotlib/lib/mpl_toolkits/mplot3d/axes3d.py lines 388-395)": [
      "\n    @martist.allow_rasterization\n    def draw(self, renderer):\n        self._unstale_viewLim()\n\n        if not self.get_visible():\n            return\n\n        # draw the background patch\n        self.patch.draw(renderer)\n        self._frameon = False\n",
      "\n@martist.allow_rasterization\ndef draw(self, renderer):\n    self._unstale_viewLim()\n\n    if not self.get_visible():\n        return\n\n    # draw the background patch\n    self.patch.draw(renderer)\n    self._frameon = False\n",
      "\n@martist.allow_rasterization\ndef draw(self, renderer):\n    self._unstale_viewLim()\n\n    if not self.get_visible():\n        return\n\n    # draw the background patch\n    self.patch.draw(renderer)\n    self._frameon = False\n",
      "\n    @martist.allow_rasterization\n    def draw(self, renderer):\n        self._unstale_viewLim()\n\n        if not self.get_visible():\n            return\n\n        # draw the background patch\n        self.patch.draw(renderer)\n        self._frameon = False\n",
      "\n    @martist.allow_rasterization\n    def draw(self, renderer):\n        self._unstale_viewLim()\n\n        if not self.get_visible():\n            return\n\n        # draw the background patch\n        self.patch.draw(renderer)\n        self._frameon = False\n",
      "\n    @martist.allow_rasterization\n    def draw(self, renderer):\n        self._unstale_viewLim()\n\n        if not self.get_visible():\n            return\n\n        # draw the background patch\n        self.patch.draw(renderer)\n        self._frameon = False\n",
      "\n    @martist.allow_rasterization\n    def draw(self, renderer):\n        self._unstale_viewLim()\n        \n        if not self.get_visible():\n            return\n\n        # draw the background patch\n        self.patch.draw(renderer)\n        self._frameon = False\n",
      "\n    @martist.allow_rasterization\n    def draw(self, renderer):\n        self._unstale_viewLim()\n\n        if not self.get_visible():\n            return\n\n        # draw the background patch\n        self.patch.draw(renderer)\n        self._frameon = False\n"
    ]
  },
  "combined_diffs": {
    "raw_patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..441efdb9a0 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -385,14 +385,17 @@ class Axes3D(Axes):\n         pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n         self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n \n+\n     @martist.allow_rasterization\n     def draw(self, renderer):\n         self._unstale_viewLim()\n \n+        if not self.get_visible():\n+            return\n+\n         # draw the background patch\n         self.patch.draw(renderer)\n         self._frameon = False\n-\n         # first, set the aspect\n         # this is duplicated from `axes._base._AxesBase.draw`\n         # but must be called before any of the artist are drawn as\n",
    "variant_0": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..8aa8d3fbaa 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -385,14 +385,17 @@ class Axes3D(Axes):\n         pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n         self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n \n+\n     @martist.allow_rasterization\n     def draw(self, renderer):\n         self._unstale_viewLim()\n+        \n+        if not self.get_visible():\n+            return\n \n         # draw the background patch\n         self.patch.draw(renderer)\n         self._frameon = False\n-\n         # first, set the aspect\n         # this is duplicated from `axes._base._AxesBase.draw`\n         # but must be called before any of the artist are drawn as\n",
    "variant_1": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..441efdb9a0 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -385,14 +385,17 @@ class Axes3D(Axes):\n         pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n         self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n \n+\n     @martist.allow_rasterization\n     def draw(self, renderer):\n         self._unstale_viewLim()\n \n+        if not self.get_visible():\n+            return\n+\n         # draw the background patch\n         self.patch.draw(renderer)\n         self._frameon = False\n-\n         # first, set the aspect\n         # this is duplicated from `axes._base._AxesBase.draw`\n         # but must be called before any of the artist are drawn as\n",
    "variant_2": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..4af780438d 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -385,14 +385,17 @@ class Axes3D(Axes):\n         pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n         self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n \n-    @martist.allow_rasterization\n-    def draw(self, renderer):\n-        self._unstale_viewLim()\n \n-        # draw the background patch\n-        self.patch.draw(renderer)\n-        self._frameon = False\n+@martist.allow_rasterization\n+def draw(self, renderer):\n+    self._unstale_viewLim()\n \n+    if not self.get_visible():\n+        return\n+\n+    # draw the background patch\n+    self.patch.draw(renderer)\n+    self._frameon = False\n         # first, set the aspect\n         # this is duplicated from `axes._base._AxesBase.draw`\n         # but must be called before any of the artist are drawn as\n",
    "variant_3": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..4af780438d 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -385,14 +385,17 @@ class Axes3D(Axes):\n         pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n         self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n \n-    @martist.allow_rasterization\n-    def draw(self, renderer):\n-        self._unstale_viewLim()\n \n-        # draw the background patch\n-        self.patch.draw(renderer)\n-        self._frameon = False\n+@martist.allow_rasterization\n+def draw(self, renderer):\n+    self._unstale_viewLim()\n \n+    if not self.get_visible():\n+        return\n+\n+    # draw the background patch\n+    self.patch.draw(renderer)\n+    self._frameon = False\n         # first, set the aspect\n         # this is duplicated from `axes._base._AxesBase.draw`\n         # but must be called before any of the artist are drawn as\n",
    "variant_4": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..441efdb9a0 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -385,14 +385,17 @@ class Axes3D(Axes):\n         pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n         self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n \n+\n     @martist.allow_rasterization\n     def draw(self, renderer):\n         self._unstale_viewLim()\n \n+        if not self.get_visible():\n+            return\n+\n         # draw the background patch\n         self.patch.draw(renderer)\n         self._frameon = False\n-\n         # first, set the aspect\n         # this is duplicated from `axes._base._AxesBase.draw`\n         # but must be called before any of the artist are drawn as\n",
    "variant_5": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..441efdb9a0 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -385,14 +385,17 @@ class Axes3D(Axes):\n         pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n         self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n \n+\n     @martist.allow_rasterization\n     def draw(self, renderer):\n         self._unstale_viewLim()\n \n+        if not self.get_visible():\n+            return\n+\n         # draw the background patch\n         self.patch.draw(renderer)\n         self._frameon = False\n-\n         # first, set the aspect\n         # this is duplicated from `axes._base._AxesBase.draw`\n         # but must be called before any of the artist are drawn as\n",
    "variant_6": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..441efdb9a0 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -385,14 +385,17 @@ class Axes3D(Axes):\n         pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n         self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n \n+\n     @martist.allow_rasterization\n     def draw(self, renderer):\n         self._unstale_viewLim()\n \n+        if not self.get_visible():\n+            return\n+\n         # draw the background patch\n         self.patch.draw(renderer)\n         self._frameon = False\n-\n         # first, set the aspect\n         # this is duplicated from `axes._base._AxesBase.draw`\n         # but must be called before any of the artist are drawn as\n",
    "variant_7": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..8aa8d3fbaa 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -385,14 +385,17 @@ class Axes3D(Axes):\n         pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n         self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n \n+\n     @martist.allow_rasterization\n     def draw(self, renderer):\n         self._unstale_viewLim()\n+        \n+        if not self.get_visible():\n+            return\n \n         # draw the background patch\n         self.patch.draw(renderer)\n         self._frameon = False\n-\n         # first, set the aspect\n         # this is duplicated from `axes._base._AxesBase.draw`\n         # but must be called before any of the artist are drawn as\n",
    "variant_8": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..441efdb9a0 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -385,14 +385,17 @@ class Axes3D(Axes):\n         pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n         self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n \n+\n     @martist.allow_rasterization\n     def draw(self, renderer):\n         self._unstale_viewLim()\n \n+        if not self.get_visible():\n+            return\n+\n         # draw the background patch\n         self.patch.draw(renderer)\n         self._frameon = False\n-\n         # first, set the aspect\n         # this is duplicated from `axes._base._AxesBase.draw`\n         # but must be called before any of the artist are drawn as\n"
  }
}